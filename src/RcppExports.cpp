// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/tree2.h"
#include <Rcpp.h>

using namespace Rcpp;

// test_adaptive_interpolator
interpolator::Interpolator test_adaptive_interpolator(Rcpp::Function f, double a, double b);
RcppExport SEXP tree2_test_adaptive_interpolator(SEXP fSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::Function >::type f(fSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        interpolator::Interpolator __result = test_adaptive_interpolator(f, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_gradient_fd1
double test_gradient_fd1(Rcpp::Function f, double x, double dx, int direction, double fx = NA_REAL);
RcppExport SEXP tree2_test_gradient_fd1(SEXP fSEXP, SEXP xSEXP, SEXP dxSEXP, SEXP directionSEXP, SEXP fxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::Function >::type f(fSEXP );
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type dx(dxSEXP );
        Rcpp::traits::input_parameter< int >::type direction(directionSEXP );
        Rcpp::traits::input_parameter< double >::type fx(fxSEXP );
        double __result = test_gradient_fd1(f, x, dx, direction, fx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_gradient_richardson
double test_gradient_richardson(Rcpp::Function f, double x, double d, size_t r);
RcppExport SEXP tree2_test_gradient_richardson(SEXP fSEXP, SEXP xSEXP, SEXP dSEXP, SEXP rSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::Function >::type f(fSEXP );
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type d(dSEXP );
        Rcpp::traits::input_parameter< size_t >::type r(rSEXP );
        double __result = test_gradient_richardson(f, x, d, r);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// mortality_growth_independent
double mortality_growth_independent(double d0, double d1, double rho, double rho_0, double height, double B6);
RcppExport SEXP tree2_mortality_growth_independent(SEXP d0SEXP, SEXP d1SEXP, SEXP rhoSEXP, SEXP rho_0SEXP, SEXP heightSEXP, SEXP B6SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type d0(d0SEXP );
        Rcpp::traits::input_parameter< double >::type d1(d1SEXP );
        Rcpp::traits::input_parameter< double >::type rho(rhoSEXP );
        Rcpp::traits::input_parameter< double >::type rho_0(rho_0SEXP );
        Rcpp::traits::input_parameter< double >::type height(heightSEXP );
        Rcpp::traits::input_parameter< double >::type B6(B6SEXP );
        double __result = mortality_growth_independent(d0, d1, rho, rho_0, height, B6);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// mortality_growth_dependent
double mortality_growth_dependent(double d2, double d3, double productivity);
RcppExport SEXP tree2_mortality_growth_dependent(SEXP d2SEXP, SEXP d3SEXP, SEXP productivitySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type d2(d2SEXP );
        Rcpp::traits::input_parameter< double >::type d3(d3SEXP );
        Rcpp::traits::input_parameter< double >::type productivity(productivitySEXP );
        double __result = mortality_growth_dependent(d2, d3, productivity);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Lorenz__ctor
ode::test::Lorenz Lorenz__ctor(double sigma, double R, double b);
RcppExport SEXP tree2_Lorenz__ctor(SEXP sigmaSEXP, SEXP RSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP );
        Rcpp::traits::input_parameter< double >::type R(RSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        ode::test::Lorenz __result = Lorenz__ctor(sigma, R, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Lorenz__size__get
size_t Lorenz__size__get(tree2::RcppR6::RcppR6<ode::test::Lorenz> obj_);
RcppExport SEXP tree2_Lorenz__size__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<ode::test::Lorenz> >::type obj_(obj_SEXP );
        size_t __result = Lorenz__size__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Lorenz__ode_values__get
std::vector<double> Lorenz__ode_values__get(tree2::RcppR6::RcppR6<ode::test::Lorenz> obj_);
RcppExport SEXP tree2_Lorenz__ode_values__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<ode::test::Lorenz> >::type obj_(obj_SEXP );
        std::vector<double> __result = Lorenz__ode_values__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Lorenz__ode_values__set
void Lorenz__ode_values__set(tree2::RcppR6::RcppR6<ode::test::Lorenz> obj_, std::vector<double> value);
RcppExport SEXP tree2_Lorenz__ode_values__set(SEXP obj_SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<ode::test::Lorenz> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< std::vector<double> >::type value(valueSEXP );
        Lorenz__ode_values__set(obj_, value);
    }
    return R_NilValue;
END_RCPP
}
// Lorenz__ode_rates__get
std::vector<double> Lorenz__ode_rates__get(tree2::RcppR6::RcppR6<ode::test::Lorenz> obj_);
RcppExport SEXP tree2_Lorenz__ode_rates__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<ode::test::Lorenz> >::type obj_(obj_SEXP );
        std::vector<double> __result = Lorenz__ode_rates__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Lorenz__pars__get
Rcpp::NumericVector Lorenz__pars__get(tree2::RcppR6::RcppR6<ode::test::Lorenz> obj_);
RcppExport SEXP tree2_Lorenz__pars__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<ode::test::Lorenz> >::type obj_(obj_SEXP );
        Rcpp::NumericVector __result = Lorenz__pars__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// OdeSystem___Lorenz__ctor
ode::OdeSystem<ode::test::Lorenz> OdeSystem___Lorenz__ctor(ode::test::Lorenz obj, double abs_tol, double rel_tol);
RcppExport SEXP tree2_OdeSystem___Lorenz__ctor(SEXP objSEXP, SEXP abs_tolSEXP, SEXP rel_tolSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< ode::test::Lorenz >::type obj(objSEXP );
        Rcpp::traits::input_parameter< double >::type abs_tol(abs_tolSEXP );
        Rcpp::traits::input_parameter< double >::type rel_tol(rel_tolSEXP );
        ode::OdeSystem<ode::test::Lorenz> __result = OdeSystem___Lorenz__ctor(obj, abs_tol, rel_tol);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// OdeSystem___Lorenz__do_step
void OdeSystem___Lorenz__do_step(tree2::RcppR6::RcppR6<ode::OdeSystem<ode::test::Lorenz> > obj_, double dt);
RcppExport SEXP tree2_OdeSystem___Lorenz__do_step(SEXP obj_SEXP, SEXP dtSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<ode::OdeSystem<ode::test::Lorenz> > >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        OdeSystem___Lorenz__do_step(obj_, dt);
    }
    return R_NilValue;
END_RCPP
}
// OdeSystem___Lorenz__try_step
bool OdeSystem___Lorenz__try_step(tree2::RcppR6::RcppR6<ode::OdeSystem<ode::test::Lorenz> > obj_, double dt);
RcppExport SEXP tree2_OdeSystem___Lorenz__try_step(SEXP obj_SEXP, SEXP dtSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<ode::OdeSystem<ode::test::Lorenz> > >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        bool __result = OdeSystem___Lorenz__try_step(obj_, dt);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// OdeSystem___Lorenz__advance
void OdeSystem___Lorenz__advance(tree2::RcppR6::RcppR6<ode::OdeSystem<ode::test::Lorenz> > obj_, double t, double dt);
RcppExport SEXP tree2_OdeSystem___Lorenz__advance(SEXP obj_SEXP, SEXP tSEXP, SEXP dtSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<ode::OdeSystem<ode::test::Lorenz> > >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< double >::type t(tSEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        OdeSystem___Lorenz__advance(obj_, t, dt);
    }
    return R_NilValue;
END_RCPP
}
// OdeSystem___Lorenz__advance_save
ode::state_saver<std::vector<double> > OdeSystem___Lorenz__advance_save(tree2::RcppR6::RcppR6<ode::OdeSystem<ode::test::Lorenz> > obj_, double t, double dt);
RcppExport SEXP tree2_OdeSystem___Lorenz__advance_save(SEXP obj_SEXP, SEXP tSEXP, SEXP dtSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<ode::OdeSystem<ode::test::Lorenz> > >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< double >::type t(tSEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        ode::state_saver<std::vector<double> > __result = OdeSystem___Lorenz__advance_save(obj_, t, dt);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// OdeSystem___Lorenz__obj__get
ode::test::Lorenz OdeSystem___Lorenz__obj__get(tree2::RcppR6::RcppR6<ode::OdeSystem<ode::test::Lorenz> > obj_);
RcppExport SEXP tree2_OdeSystem___Lorenz__obj__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<ode::OdeSystem<ode::test::Lorenz> > >::type obj_(obj_SEXP );
        ode::test::Lorenz __result = OdeSystem___Lorenz__obj__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// OdeSystem___Lorenz__t__get
double OdeSystem___Lorenz__t__get(tree2::RcppR6::RcppR6<ode::OdeSystem<ode::test::Lorenz> > obj_);
RcppExport SEXP tree2_OdeSystem___Lorenz__t__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<ode::OdeSystem<ode::test::Lorenz> > >::type obj_(obj_SEXP );
        double __result = OdeSystem___Lorenz__t__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// OdeSystem___Lorenz__t__set
void OdeSystem___Lorenz__t__set(tree2::RcppR6::RcppR6<ode::OdeSystem<ode::test::Lorenz> > obj_, double value);
RcppExport SEXP tree2_OdeSystem___Lorenz__t__set(SEXP obj_SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<ode::OdeSystem<ode::test::Lorenz> > >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        OdeSystem___Lorenz__t__set(obj_, value);
    }
    return R_NilValue;
END_RCPP
}
// OdeSystem___Lorenz__y__get
std::vector<double> OdeSystem___Lorenz__y__get(tree2::RcppR6::RcppR6<ode::OdeSystem<ode::test::Lorenz> > obj_);
RcppExport SEXP tree2_OdeSystem___Lorenz__y__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<ode::OdeSystem<ode::test::Lorenz> > >::type obj_(obj_SEXP );
        std::vector<double> __result = OdeSystem___Lorenz__y__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// OdeSystem___Lorenz__y__set
void OdeSystem___Lorenz__y__set(tree2::RcppR6::RcppR6<ode::OdeSystem<ode::test::Lorenz> > obj_, std::vector<double> value);
RcppExport SEXP tree2_OdeSystem___Lorenz__y__set(SEXP obj_SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<ode::OdeSystem<ode::test::Lorenz> > >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< std::vector<double> >::type value(valueSEXP );
        OdeSystem___Lorenz__y__set(obj_, value);
    }
    return R_NilValue;
END_RCPP
}
// CohortScheduleEvent__ctor
tree2::CohortScheduleEvent CohortScheduleEvent__ctor(double introduction, util::index species_index);
RcppExport SEXP tree2_CohortScheduleEvent__ctor(SEXP introductionSEXP, SEXP species_indexSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type introduction(introductionSEXP );
        Rcpp::traits::input_parameter< util::index >::type species_index(species_indexSEXP );
        tree2::CohortScheduleEvent __result = CohortScheduleEvent__ctor(introduction, species_index);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CohortScheduleEvent__species_index__get
util::index CohortScheduleEvent__species_index__get(tree2::RcppR6::RcppR6<tree2::CohortScheduleEvent> obj_);
RcppExport SEXP tree2_CohortScheduleEvent__species_index__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortScheduleEvent> >::type obj_(obj_SEXP );
        util::index __result = CohortScheduleEvent__species_index__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CohortScheduleEvent__species_index__set
void CohortScheduleEvent__species_index__set(tree2::RcppR6::RcppR6<tree2::CohortScheduleEvent> obj_, util::index value);
RcppExport SEXP tree2_CohortScheduleEvent__species_index__set(SEXP obj_SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortScheduleEvent> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< util::index >::type value(valueSEXP );
        CohortScheduleEvent__species_index__set(obj_, value);
    }
    return R_NilValue;
END_RCPP
}
// CohortScheduleEvent__times__get
std::vector<double> CohortScheduleEvent__times__get(tree2::RcppR6::RcppR6<tree2::CohortScheduleEvent> obj_);
RcppExport SEXP tree2_CohortScheduleEvent__times__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortScheduleEvent> >::type obj_(obj_SEXP );
        std::vector<double> __result = CohortScheduleEvent__times__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CohortScheduleEvent__time_introduction__get
double CohortScheduleEvent__time_introduction__get(tree2::RcppR6::RcppR6<tree2::CohortScheduleEvent> obj_);
RcppExport SEXP tree2_CohortScheduleEvent__time_introduction__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortScheduleEvent> >::type obj_(obj_SEXP );
        double __result = CohortScheduleEvent__time_introduction__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CohortScheduleEvent__time_end__get
double CohortScheduleEvent__time_end__get(tree2::RcppR6::RcppR6<tree2::CohortScheduleEvent> obj_);
RcppExport SEXP tree2_CohortScheduleEvent__time_end__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortScheduleEvent> >::type obj_(obj_SEXP );
        double __result = CohortScheduleEvent__time_end__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CohortScheduleEvent__species_index_raw__get
size_t CohortScheduleEvent__species_index_raw__get(tree2::RcppR6::RcppR6<tree2::CohortScheduleEvent> obj_);
RcppExport SEXP tree2_CohortScheduleEvent__species_index_raw__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortScheduleEvent> >::type obj_(obj_SEXP );
        size_t __result = CohortScheduleEvent__species_index_raw__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CohortSchedule__ctor
tree2::CohortSchedule CohortSchedule__ctor(size_t n_species);
RcppExport SEXP tree2_CohortSchedule__ctor(SEXP n_speciesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< size_t >::type n_species(n_speciesSEXP );
        tree2::CohortSchedule __result = CohortSchedule__ctor(n_species);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CohortSchedule__expand
tree2::CohortSchedule CohortSchedule__expand(tree2::RcppR6::RcppR6<tree2::CohortSchedule> obj_, size_t n_extra, std::vector<double> times);
RcppExport SEXP tree2_CohortSchedule__expand(SEXP obj_SEXP, SEXP n_extraSEXP, SEXP timesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortSchedule> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< size_t >::type n_extra(n_extraSEXP );
        Rcpp::traits::input_parameter< std::vector<double> >::type times(timesSEXP );
        tree2::CohortSchedule __result = CohortSchedule__expand(obj_, n_extra, times);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CohortSchedule__clear_times
void CohortSchedule__clear_times(tree2::RcppR6::RcppR6<tree2::CohortSchedule> obj_, util::index species_index);
RcppExport SEXP tree2_CohortSchedule__clear_times(SEXP obj_SEXP, SEXP species_indexSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortSchedule> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< util::index >::type species_index(species_indexSEXP );
        CohortSchedule__clear_times(obj_, species_index);
    }
    return R_NilValue;
END_RCPP
}
// CohortSchedule__clear_ode_times
void CohortSchedule__clear_ode_times(tree2::RcppR6::RcppR6<tree2::CohortSchedule> obj_);
RcppExport SEXP tree2_CohortSchedule__clear_ode_times(SEXP obj_SEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortSchedule> >::type obj_(obj_SEXP );
        CohortSchedule__clear_ode_times(obj_);
    }
    return R_NilValue;
END_RCPP
}
// CohortSchedule__set_times
void CohortSchedule__set_times(tree2::RcppR6::RcppR6<tree2::CohortSchedule> obj_, std::vector<double> times, util::index species_index);
RcppExport SEXP tree2_CohortSchedule__set_times(SEXP obj_SEXP, SEXP timesSEXP, SEXP species_indexSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortSchedule> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< std::vector<double> >::type times(timesSEXP );
        Rcpp::traits::input_parameter< util::index >::type species_index(species_indexSEXP );
        CohortSchedule__set_times(obj_, times, species_index);
    }
    return R_NilValue;
END_RCPP
}
// CohortSchedule__times
std::vector<double> CohortSchedule__times(tree2::RcppR6::RcppR6<tree2::CohortSchedule> obj_, util::index species_index);
RcppExport SEXP tree2_CohortSchedule__times(SEXP obj_SEXP, SEXP species_indexSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortSchedule> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< util::index >::type species_index(species_indexSEXP );
        std::vector<double> __result = CohortSchedule__times(obj_, species_index);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CohortSchedule__reset
void CohortSchedule__reset(tree2::RcppR6::RcppR6<tree2::CohortSchedule> obj_);
RcppExport SEXP tree2_CohortSchedule__reset(SEXP obj_SEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortSchedule> >::type obj_(obj_SEXP );
        CohortSchedule__reset(obj_);
    }
    return R_NilValue;
END_RCPP
}
// CohortSchedule__pop
void CohortSchedule__pop(tree2::RcppR6::RcppR6<tree2::CohortSchedule> obj_);
RcppExport SEXP tree2_CohortSchedule__pop(SEXP obj_SEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortSchedule> >::type obj_(obj_SEXP );
        CohortSchedule__pop(obj_);
    }
    return R_NilValue;
END_RCPP
}
// CohortSchedule__copy
tree2::CohortSchedule CohortSchedule__copy(tree2::RcppR6::RcppR6<tree2::CohortSchedule> obj_);
RcppExport SEXP tree2_CohortSchedule__copy(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortSchedule> >::type obj_(obj_SEXP );
        tree2::CohortSchedule __result = CohortSchedule__copy(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CohortSchedule__size__get
size_t CohortSchedule__size__get(tree2::RcppR6::RcppR6<tree2::CohortSchedule> obj_);
RcppExport SEXP tree2_CohortSchedule__size__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortSchedule> >::type obj_(obj_SEXP );
        size_t __result = CohortSchedule__size__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CohortSchedule__n_species__get
size_t CohortSchedule__n_species__get(tree2::RcppR6::RcppR6<tree2::CohortSchedule> obj_);
RcppExport SEXP tree2_CohortSchedule__n_species__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortSchedule> >::type obj_(obj_SEXP );
        size_t __result = CohortSchedule__n_species__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CohortSchedule__next_event__get
tree2::CohortScheduleEvent CohortSchedule__next_event__get(tree2::RcppR6::RcppR6<tree2::CohortSchedule> obj_);
RcppExport SEXP tree2_CohortSchedule__next_event__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortSchedule> >::type obj_(obj_SEXP );
        tree2::CohortScheduleEvent __result = CohortSchedule__next_event__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CohortSchedule__remaining__get
size_t CohortSchedule__remaining__get(tree2::RcppR6::RcppR6<tree2::CohortSchedule> obj_);
RcppExport SEXP tree2_CohortSchedule__remaining__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortSchedule> >::type obj_(obj_SEXP );
        size_t __result = CohortSchedule__remaining__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CohortSchedule__max_time__get
double CohortSchedule__max_time__get(tree2::RcppR6::RcppR6<tree2::CohortSchedule> obj_);
RcppExport SEXP tree2_CohortSchedule__max_time__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortSchedule> >::type obj_(obj_SEXP );
        double __result = CohortSchedule__max_time__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CohortSchedule__max_time__set
void CohortSchedule__max_time__set(tree2::RcppR6::RcppR6<tree2::CohortSchedule> obj_, double value);
RcppExport SEXP tree2_CohortSchedule__max_time__set(SEXP obj_SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortSchedule> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        CohortSchedule__max_time__set(obj_, value);
    }
    return R_NilValue;
END_RCPP
}
// CohortSchedule__ode_times__get
std::vector<double> CohortSchedule__ode_times__get(tree2::RcppR6::RcppR6<tree2::CohortSchedule> obj_);
RcppExport SEXP tree2_CohortSchedule__ode_times__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortSchedule> >::type obj_(obj_SEXP );
        std::vector<double> __result = CohortSchedule__ode_times__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CohortSchedule__ode_times__set
void CohortSchedule__ode_times__set(tree2::RcppR6::RcppR6<tree2::CohortSchedule> obj_, std::vector<double> value);
RcppExport SEXP tree2_CohortSchedule__ode_times__set(SEXP obj_SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortSchedule> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< std::vector<double> >::type value(valueSEXP );
        CohortSchedule__ode_times__set(obj_, value);
    }
    return R_NilValue;
END_RCPP
}
// CohortSchedule__use_ode_times__get
bool CohortSchedule__use_ode_times__get(tree2::RcppR6::RcppR6<tree2::CohortSchedule> obj_);
RcppExport SEXP tree2_CohortSchedule__use_ode_times__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortSchedule> >::type obj_(obj_SEXP );
        bool __result = CohortSchedule__use_ode_times__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CohortSchedule__use_ode_times__set
void CohortSchedule__use_ode_times__set(tree2::RcppR6::RcppR6<tree2::CohortSchedule> obj_, bool value);
RcppExport SEXP tree2_CohortSchedule__use_ode_times__set(SEXP obj_SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortSchedule> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< bool >::type value(valueSEXP );
        CohortSchedule__use_ode_times__set(obj_, value);
    }
    return R_NilValue;
END_RCPP
}
// CohortSchedule__all_times__get
SEXP CohortSchedule__all_times__get(tree2::RcppR6::RcppR6<tree2::CohortSchedule> obj_);
RcppExport SEXP tree2_CohortSchedule__all_times__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortSchedule> >::type obj_(obj_SEXP );
        SEXP __result = CohortSchedule__all_times__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CohortSchedule__all_times__set
void CohortSchedule__all_times__set(tree2::RcppR6::RcppR6<tree2::CohortSchedule> obj_, SEXP value);
RcppExport SEXP tree2_CohortSchedule__all_times__set(SEXP obj_SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::CohortSchedule> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP );
        CohortSchedule__all_times__set(obj_, value);
    }
    return R_NilValue;
END_RCPP
}
// Disturbance__ctor
tree2::Disturbance Disturbance__ctor(double mean_interval);
RcppExport SEXP tree2_Disturbance__ctor(SEXP mean_intervalSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type mean_interval(mean_intervalSEXP );
        tree2::Disturbance __result = Disturbance__ctor(mean_interval);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Disturbance__density
double Disturbance__density(tree2::RcppR6::RcppR6<tree2::Disturbance> obj_, double time);
RcppExport SEXP tree2_Disturbance__density(SEXP obj_SEXP, SEXP timeSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Disturbance> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< double >::type time(timeSEXP );
        double __result = Disturbance__density(obj_, time);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Disturbance__pr_survival
double Disturbance__pr_survival(tree2::RcppR6::RcppR6<tree2::Disturbance> obj_, double time);
RcppExport SEXP tree2_Disturbance__pr_survival(SEXP obj_SEXP, SEXP timeSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Disturbance> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< double >::type time(timeSEXP );
        double __result = Disturbance__pr_survival(obj_, time);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Disturbance__pr_survival_conditional
double Disturbance__pr_survival_conditional(tree2::RcppR6::RcppR6<tree2::Disturbance> obj_, double time, double time_start);
RcppExport SEXP tree2_Disturbance__pr_survival_conditional(SEXP obj_SEXP, SEXP timeSEXP, SEXP time_startSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Disturbance> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< double >::type time(timeSEXP );
        Rcpp::traits::input_parameter< double >::type time_start(time_startSEXP );
        double __result = Disturbance__pr_survival_conditional(obj_, time, time_start);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Disturbance__cdf
double Disturbance__cdf(tree2::RcppR6::RcppR6<tree2::Disturbance> obj_, double time);
RcppExport SEXP tree2_Disturbance__cdf(SEXP obj_SEXP, SEXP timeSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Disturbance> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< double >::type time(timeSEXP );
        double __result = Disturbance__cdf(obj_, time);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Disturbance__mean_interval__get
double Disturbance__mean_interval__get(tree2::RcppR6::RcppR6<tree2::Disturbance> obj_);
RcppExport SEXP tree2_Disturbance__mean_interval__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Disturbance> >::type obj_(obj_SEXP );
        double __result = Disturbance__mean_interval__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Control__ctor
SEXP Control__ctor();
RcppExport SEXP tree2_Control__ctor() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        SEXP __result = Control__ctor();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Strategy__ctor
SEXP Strategy__ctor();
RcppExport SEXP tree2_Strategy__ctor() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        SEXP __result = Strategy__ctor();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Parameters__ctor
SEXP Parameters__ctor();
RcppExport SEXP tree2_Parameters__ctor() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        SEXP __result = Parameters__ctor();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// QK__ctor
quadrature::QK QK__ctor(size_t rule);
RcppExport SEXP tree2_QK__ctor(SEXP ruleSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< size_t >::type rule(ruleSEXP );
        quadrature::QK __result = QK__ctor(rule);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// QK__integrate
double QK__integrate(tree2::RcppR6::RcppR6<quadrature::QK> obj_, SEXP f, double a, double b);
RcppExport SEXP tree2_QK__integrate(SEXP obj_SEXP, SEXP fSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<quadrature::QK> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< SEXP >::type f(fSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        double __result = QK__integrate(obj_, f, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// QK__integrate_vector_x
std::vector<double> QK__integrate_vector_x(tree2::RcppR6::RcppR6<quadrature::QK> obj_, double a, double b);
RcppExport SEXP tree2_QK__integrate_vector_x(SEXP obj_SEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<quadrature::QK> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        std::vector<double> __result = QK__integrate_vector_x(obj_, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// QK__integrate_vector
double QK__integrate_vector(tree2::RcppR6::RcppR6<quadrature::QK> obj_, std::vector<double> y, double a, double b);
RcppExport SEXP tree2_QK__integrate_vector(SEXP obj_SEXP, SEXP ySEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<quadrature::QK> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< std::vector<double> >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        double __result = QK__integrate_vector(obj_, y, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// QK__last_area__get
double QK__last_area__get(tree2::RcppR6::RcppR6<quadrature::QK> obj_);
RcppExport SEXP tree2_QK__last_area__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<quadrature::QK> >::type obj_(obj_SEXP );
        double __result = QK__last_area__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// QK__last_error__get
double QK__last_error__get(tree2::RcppR6::RcppR6<quadrature::QK> obj_);
RcppExport SEXP tree2_QK__last_error__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<quadrature::QK> >::type obj_(obj_SEXP );
        double __result = QK__last_error__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// QK__last_area_abs__get
double QK__last_area_abs__get(tree2::RcppR6::RcppR6<quadrature::QK> obj_);
RcppExport SEXP tree2_QK__last_area_abs__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<quadrature::QK> >::type obj_(obj_SEXP );
        double __result = QK__last_area_abs__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// QK__last_area_asc__get
double QK__last_area_asc__get(tree2::RcppR6::RcppR6<quadrature::QK> obj_);
RcppExport SEXP tree2_QK__last_area_asc__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<quadrature::QK> >::type obj_(obj_SEXP );
        double __result = QK__last_area_asc__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// QAG__ctor
quadrature::QAG QAG__ctor(size_t rule, size_t max_iterations, double atol, double rtol);
RcppExport SEXP tree2_QAG__ctor(SEXP ruleSEXP, SEXP max_iterationsSEXP, SEXP atolSEXP, SEXP rtolSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< size_t >::type rule(ruleSEXP );
        Rcpp::traits::input_parameter< size_t >::type max_iterations(max_iterationsSEXP );
        Rcpp::traits::input_parameter< double >::type atol(atolSEXP );
        Rcpp::traits::input_parameter< double >::type rtol(rtolSEXP );
        quadrature::QAG __result = QAG__ctor(rule, max_iterations, atol, rtol);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// QAG__integrate
double QAG__integrate(tree2::RcppR6::RcppR6<quadrature::QAG> obj_, SEXP f, double a, double b);
RcppExport SEXP tree2_QAG__integrate(SEXP obj_SEXP, SEXP fSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<quadrature::QAG> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< SEXP >::type f(fSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        double __result = QAG__integrate(obj_, f, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// QAG__integrate_with_intervals
double QAG__integrate_with_intervals(tree2::RcppR6::RcppR6<quadrature::QAG> obj_, SEXP f, SEXP intervals);
RcppExport SEXP tree2_QAG__integrate_with_intervals(SEXP obj_SEXP, SEXP fSEXP, SEXP intervalsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<quadrature::QAG> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< SEXP >::type f(fSEXP );
        Rcpp::traits::input_parameter< SEXP >::type intervals(intervalsSEXP );
        double __result = QAG__integrate_with_intervals(obj_, f, intervals);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// QAG__last_area__get
double QAG__last_area__get(tree2::RcppR6::RcppR6<quadrature::QAG> obj_);
RcppExport SEXP tree2_QAG__last_area__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<quadrature::QAG> >::type obj_(obj_SEXP );
        double __result = QAG__last_area__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// QAG__last_error__get
double QAG__last_error__get(tree2::RcppR6::RcppR6<quadrature::QAG> obj_);
RcppExport SEXP tree2_QAG__last_error__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<quadrature::QAG> >::type obj_(obj_SEXP );
        double __result = QAG__last_error__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// QAG__last_iterations__get
size_t QAG__last_iterations__get(tree2::RcppR6::RcppR6<quadrature::QAG> obj_);
RcppExport SEXP tree2_QAG__last_iterations__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<quadrature::QAG> >::type obj_(obj_SEXP );
        size_t __result = QAG__last_iterations__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// QAG__last_intervals__get
quadrature::intervals_type QAG__last_intervals__get(tree2::RcppR6::RcppR6<quadrature::QAG> obj_);
RcppExport SEXP tree2_QAG__last_intervals__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<quadrature::QAG> >::type obj_(obj_SEXP );
        quadrature::intervals_type __result = QAG__last_intervals__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// QAG__is_adaptive__get
bool QAG__is_adaptive__get(tree2::RcppR6::RcppR6<quadrature::QAG> obj_);
RcppExport SEXP tree2_QAG__is_adaptive__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<quadrature::QAG> >::type obj_(obj_SEXP );
        bool __result = QAG__is_adaptive__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Interpolator__ctor
interpolator::Interpolator Interpolator__ctor();
RcppExport SEXP tree2_Interpolator__ctor() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        interpolator::Interpolator __result = Interpolator__ctor();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Interpolator__init
void Interpolator__init(tree2::RcppR6::RcppR6<interpolator::Interpolator> obj_, const std::vector<double>& x, const std::vector<double>& y);
RcppExport SEXP tree2_Interpolator__init(SEXP obj_SEXP, SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<interpolator::Interpolator> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< const std::vector<double>& >::type x(xSEXP );
        Rcpp::traits::input_parameter< const std::vector<double>& >::type y(ySEXP );
        Interpolator__init(obj_, x, y);
    }
    return R_NilValue;
END_RCPP
}
// Interpolator__eval
std::vector<double> Interpolator__eval(tree2::RcppR6::RcppR6<interpolator::Interpolator> obj_, std::vector<double> x);
RcppExport SEXP tree2_Interpolator__eval(SEXP obj_SEXP, SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<interpolator::Interpolator> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP );
        std::vector<double> __result = Interpolator__eval(obj_, x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Interpolator__deriv
std::vector<double> Interpolator__deriv(tree2::RcppR6::RcppR6<interpolator::Interpolator> obj_, std::vector<double> x);
RcppExport SEXP tree2_Interpolator__deriv(SEXP obj_SEXP, SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<interpolator::Interpolator> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP );
        std::vector<double> __result = Interpolator__deriv(obj_, x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Interpolator__type__get
std::string Interpolator__type__get(tree2::RcppR6::RcppR6<interpolator::Interpolator> obj_);
RcppExport SEXP tree2_Interpolator__type__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<interpolator::Interpolator> >::type obj_(obj_SEXP );
        std::string __result = Interpolator__type__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Interpolator__x__get
std::vector<double> Interpolator__x__get(tree2::RcppR6::RcppR6<interpolator::Interpolator> obj_);
RcppExport SEXP tree2_Interpolator__x__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<interpolator::Interpolator> >::type obj_(obj_SEXP );
        std::vector<double> __result = Interpolator__x__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Interpolator__y__get
std::vector<double> Interpolator__y__get(tree2::RcppR6::RcppR6<interpolator::Interpolator> obj_);
RcppExport SEXP tree2_Interpolator__y__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<interpolator::Interpolator> >::type obj_(obj_SEXP );
        std::vector<double> __result = Interpolator__y__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Interpolator__xy__get
SEXP Interpolator__xy__get(tree2::RcppR6::RcppR6<interpolator::Interpolator> obj_);
RcppExport SEXP tree2_Interpolator__xy__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<interpolator::Interpolator> >::type obj_(obj_SEXP );
        SEXP __result = Interpolator__xy__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Interpolator__size__get
size_t Interpolator__size__get(tree2::RcppR6::RcppR6<interpolator::Interpolator> obj_);
RcppExport SEXP tree2_Interpolator__size__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<interpolator::Interpolator> >::type obj_(obj_SEXP );
        size_t __result = Interpolator__size__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Interpolator__min__get
double Interpolator__min__get(tree2::RcppR6::RcppR6<interpolator::Interpolator> obj_);
RcppExport SEXP tree2_Interpolator__min__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<interpolator::Interpolator> >::type obj_(obj_SEXP );
        double __result = Interpolator__min__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Interpolator__max__get
double Interpolator__max__get(tree2::RcppR6::RcppR6<interpolator::Interpolator> obj_);
RcppExport SEXP tree2_Interpolator__max__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<interpolator::Interpolator> >::type obj_(obj_SEXP );
        double __result = Interpolator__max__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Environment__ctor
tree2::Environment Environment__ctor(tree2::Parameters p);
RcppExport SEXP tree2_Environment__ctor(SEXP pSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::Parameters >::type p(pSEXP );
        tree2::Environment __result = Environment__ctor(p);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Environment__canopy_openness
double Environment__canopy_openness(tree2::RcppR6::RcppR6<tree2::Environment> obj_, double height);
RcppExport SEXP tree2_Environment__canopy_openness(SEXP obj_SEXP, SEXP heightSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Environment> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< double >::type height(heightSEXP );
        double __result = Environment__canopy_openness(obj_, height);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Environment__patch_survival_conditional
double Environment__patch_survival_conditional(tree2::RcppR6::RcppR6<tree2::Environment> obj_, double time_at_birth);
RcppExport SEXP tree2_Environment__patch_survival_conditional(SEXP obj_SEXP, SEXP time_at_birthSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Environment> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< double >::type time_at_birth(time_at_birthSEXP );
        double __result = Environment__patch_survival_conditional(obj_, time_at_birth);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Environment__clear
void Environment__clear(tree2::RcppR6::RcppR6<tree2::Environment> obj_);
RcppExport SEXP tree2_Environment__clear(SEXP obj_SEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Environment> >::type obj_(obj_SEXP );
        Environment__clear(obj_);
    }
    return R_NilValue;
END_RCPP
}
// Environment__set_seed_rain_index
void Environment__set_seed_rain_index(tree2::RcppR6::RcppR6<tree2::Environment> obj_, util::index x);
RcppExport SEXP tree2_Environment__set_seed_rain_index(SEXP obj_SEXP, SEXP xSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Environment> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< util::index >::type x(xSEXP );
        Environment__set_seed_rain_index(obj_, x);
    }
    return R_NilValue;
END_RCPP
}
// Environment__patch_survival__get
double Environment__patch_survival__get(tree2::RcppR6::RcppR6<tree2::Environment> obj_);
RcppExport SEXP tree2_Environment__patch_survival__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Environment> >::type obj_(obj_SEXP );
        double __result = Environment__patch_survival__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Environment__seed_rain_rate__get
double Environment__seed_rain_rate__get(tree2::RcppR6::RcppR6<tree2::Environment> obj_);
RcppExport SEXP tree2_Environment__seed_rain_rate__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Environment> >::type obj_(obj_SEXP );
        double __result = Environment__seed_rain_rate__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Environment__disturbance_regime__get
tree2::Disturbance Environment__disturbance_regime__get(tree2::RcppR6::RcppR6<tree2::Environment> obj_);
RcppExport SEXP tree2_Environment__disturbance_regime__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Environment> >::type obj_(obj_SEXP );
        tree2::Disturbance __result = Environment__disturbance_regime__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Environment__disturbance_regime__set
void Environment__disturbance_regime__set(tree2::RcppR6::RcppR6<tree2::Environment> obj_, tree2::Disturbance value);
RcppExport SEXP tree2_Environment__disturbance_regime__set(SEXP obj_SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Environment> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< tree2::Disturbance >::type value(valueSEXP );
        Environment__disturbance_regime__set(obj_, value);
    }
    return R_NilValue;
END_RCPP
}
// Environment__time__get
double Environment__time__get(tree2::RcppR6::RcppR6<tree2::Environment> obj_);
RcppExport SEXP tree2_Environment__time__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Environment> >::type obj_(obj_SEXP );
        double __result = Environment__time__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Environment__time__set
void Environment__time__set(tree2::RcppR6::RcppR6<tree2::Environment> obj_, double value);
RcppExport SEXP tree2_Environment__time__set(SEXP obj_SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Environment> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Environment__time__set(obj_, value);
    }
    return R_NilValue;
END_RCPP
}
// Environment__light_environment__get
interpolator::Interpolator Environment__light_environment__get(tree2::RcppR6::RcppR6<tree2::Environment> obj_);
RcppExport SEXP tree2_Environment__light_environment__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Environment> >::type obj_(obj_SEXP );
        interpolator::Interpolator __result = Environment__light_environment__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Environment__light_environment__set
void Environment__light_environment__set(tree2::RcppR6::RcppR6<tree2::Environment> obj_, interpolator::Interpolator value);
RcppExport SEXP tree2_Environment__light_environment__set(SEXP obj_SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Environment> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< interpolator::Interpolator >::type value(valueSEXP );
        Environment__light_environment__set(obj_, value);
    }
    return R_NilValue;
END_RCPP
}
// Plant__ctor
tree2::Plant Plant__ctor(tree2::Strategy strategy);
RcppExport SEXP tree2_Plant__ctor(SEXP strategySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::Strategy >::type strategy(strategySEXP );
        tree2::Plant __result = Plant__ctor(strategy);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Plant__leaf_area_above
double Plant__leaf_area_above(tree2::RcppR6::RcppR6<tree2::Plant> obj_, double h);
RcppExport SEXP tree2_Plant__leaf_area_above(SEXP obj_SEXP, SEXP hSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Plant> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< double >::type h(hSEXP );
        double __result = Plant__leaf_area_above(obj_, h);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Plant__compute_vars_phys
void Plant__compute_vars_phys(tree2::RcppR6::RcppR6<tree2::Plant> obj_, const tree2::Environment& environment);
RcppExport SEXP tree2_Plant__compute_vars_phys(SEXP obj_SEXP, SEXP environmentSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Plant> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< const tree2::Environment& >::type environment(environmentSEXP );
        Plant__compute_vars_phys(obj_, environment);
    }
    return R_NilValue;
END_RCPP
}
// Plant__germination_probability
double Plant__germination_probability(tree2::RcppR6::RcppR6<tree2::Plant> obj_, const tree2::Environment& environment);
RcppExport SEXP tree2_Plant__germination_probability(SEXP obj_SEXP, SEXP environmentSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Plant> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< const tree2::Environment& >::type environment(environmentSEXP );
        double __result = Plant__germination_probability(obj_, environment);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Plant__copy
tree2::Plant Plant__copy(tree2::RcppR6::RcppR6<tree2::Plant> obj_);
RcppExport SEXP tree2_Plant__copy(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Plant> >::type obj_(obj_SEXP );
        tree2::Plant __result = Plant__copy(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Plant__height__get
double Plant__height__get(tree2::RcppR6::RcppR6<tree2::Plant> obj_);
RcppExport SEXP tree2_Plant__height__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Plant> >::type obj_(obj_SEXP );
        double __result = Plant__height__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Plant__height__set
void Plant__height__set(tree2::RcppR6::RcppR6<tree2::Plant> obj_, double value);
RcppExport SEXP tree2_Plant__height__set(SEXP obj_SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Plant> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Plant__height__set(obj_, value);
    }
    return R_NilValue;
END_RCPP
}
// Plant__mortality__get
double Plant__mortality__get(tree2::RcppR6::RcppR6<tree2::Plant> obj_);
RcppExport SEXP tree2_Plant__mortality__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Plant> >::type obj_(obj_SEXP );
        double __result = Plant__mortality__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Plant__mortality__set
void Plant__mortality__set(tree2::RcppR6::RcppR6<tree2::Plant> obj_, double value);
RcppExport SEXP tree2_Plant__mortality__set(SEXP obj_SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Plant> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Plant__mortality__set(obj_, value);
    }
    return R_NilValue;
END_RCPP
}
// Plant__fecundity__get
double Plant__fecundity__get(tree2::RcppR6::RcppR6<tree2::Plant> obj_);
RcppExport SEXP tree2_Plant__fecundity__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Plant> >::type obj_(obj_SEXP );
        double __result = Plant__fecundity__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Plant__fecundity__set
void Plant__fecundity__set(tree2::RcppR6::RcppR6<tree2::Plant> obj_, double value);
RcppExport SEXP tree2_Plant__fecundity__set(SEXP obj_SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Plant> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Plant__fecundity__set(obj_, value);
    }
    return R_NilValue;
END_RCPP
}
// Plant__heartwood_area__get
double Plant__heartwood_area__get(tree2::RcppR6::RcppR6<tree2::Plant> obj_);
RcppExport SEXP tree2_Plant__heartwood_area__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Plant> >::type obj_(obj_SEXP );
        double __result = Plant__heartwood_area__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Plant__heartwood_area__set
void Plant__heartwood_area__set(tree2::RcppR6::RcppR6<tree2::Plant> obj_, double value);
RcppExport SEXP tree2_Plant__heartwood_area__set(SEXP obj_SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Plant> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Plant__heartwood_area__set(obj_, value);
    }
    return R_NilValue;
END_RCPP
}
// Plant__heartwood_mass__get
double Plant__heartwood_mass__get(tree2::RcppR6::RcppR6<tree2::Plant> obj_);
RcppExport SEXP tree2_Plant__heartwood_mass__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Plant> >::type obj_(obj_SEXP );
        double __result = Plant__heartwood_mass__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Plant__heartwood_mass__set
void Plant__heartwood_mass__set(tree2::RcppR6::RcppR6<tree2::Plant> obj_, double value);
RcppExport SEXP tree2_Plant__heartwood_mass__set(SEXP obj_SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Plant> >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Plant__heartwood_mass__set(obj_, value);
    }
    return R_NilValue;
END_RCPP
}
// Plant__leaf_area__get
double Plant__leaf_area__get(tree2::RcppR6::RcppR6<tree2::Plant> obj_);
RcppExport SEXP tree2_Plant__leaf_area__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Plant> >::type obj_(obj_SEXP );
        double __result = Plant__leaf_area__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Plant__survival_probability__get
double Plant__survival_probability__get(tree2::RcppR6::RcppR6<tree2::Plant> obj_);
RcppExport SEXP tree2_Plant__survival_probability__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Plant> >::type obj_(obj_SEXP );
        double __result = Plant__survival_probability__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Plant__strategy__get
tree2::Strategy Plant__strategy__get(tree2::RcppR6::RcppR6<tree2::Plant> obj_);
RcppExport SEXP tree2_Plant__strategy__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Plant> >::type obj_(obj_SEXP );
        tree2::Strategy __result = Plant__strategy__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Plant__vars_size__get
SEXP Plant__vars_size__get(tree2::RcppR6::RcppR6<tree2::Plant> obj_);
RcppExport SEXP tree2_Plant__vars_size__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Plant> >::type obj_(obj_SEXP );
        SEXP __result = Plant__vars_size__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Plant__vars_phys__get
SEXP Plant__vars_phys__get(tree2::RcppR6::RcppR6<tree2::Plant> obj_);
RcppExport SEXP tree2_Plant__vars_phys__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Plant> >::type obj_(obj_SEXP );
        SEXP __result = Plant__vars_phys__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Plant__vars_growth__get
SEXP Plant__vars_growth__get(tree2::RcppR6::RcppR6<tree2::Plant> obj_);
RcppExport SEXP tree2_Plant__vars_growth__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Plant> >::type obj_(obj_SEXP );
        SEXP __result = Plant__vars_growth__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Cohort__ctor
tree2::Cohort<tree2::Plant> Cohort__ctor(tree2::Strategy strategy);
RcppExport SEXP tree2_Cohort__ctor(SEXP strategySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::Strategy >::type strategy(strategySEXP );
        tree2::Cohort<tree2::Plant> __result = Cohort__ctor(strategy);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Cohort__leaf_area_above
double Cohort__leaf_area_above(tree2::RcppR6::RcppR6<tree2::Cohort<tree2::Plant> > obj_, double height);
RcppExport SEXP tree2_Cohort__leaf_area_above(SEXP obj_SEXP, SEXP heightSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Cohort<tree2::Plant> > >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< double >::type height(heightSEXP );
        double __result = Cohort__leaf_area_above(obj_, height);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Cohort__growth_rate_gradient
double Cohort__growth_rate_gradient(tree2::RcppR6::RcppR6<tree2::Cohort<tree2::Plant> > obj_, const tree2::Environment& environment);
RcppExport SEXP tree2_Cohort__growth_rate_gradient(SEXP obj_SEXP, SEXP environmentSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Cohort<tree2::Plant> > >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< const tree2::Environment& >::type environment(environmentSEXP );
        double __result = Cohort__growth_rate_gradient(obj_, environment);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Cohort__compute_vars_phys
void Cohort__compute_vars_phys(tree2::RcppR6::RcppR6<tree2::Cohort<tree2::Plant> > obj_, const tree2::Environment& environment);
RcppExport SEXP tree2_Cohort__compute_vars_phys(SEXP obj_SEXP, SEXP environmentSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Cohort<tree2::Plant> > >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< const tree2::Environment& >::type environment(environmentSEXP );
        Cohort__compute_vars_phys(obj_, environment);
    }
    return R_NilValue;
END_RCPP
}
// Cohort__compute_initial_conditions
void Cohort__compute_initial_conditions(tree2::RcppR6::RcppR6<tree2::Cohort<tree2::Plant> > obj_, const tree2::Environment& environment);
RcppExport SEXP tree2_Cohort__compute_initial_conditions(SEXP obj_SEXP, SEXP environmentSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Cohort<tree2::Plant> > >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< const tree2::Environment& >::type environment(environmentSEXP );
        Cohort__compute_initial_conditions(obj_, environment);
    }
    return R_NilValue;
END_RCPP
}
// Cohort__plant__get
tree2::Plant Cohort__plant__get(tree2::RcppR6::RcppR6<tree2::Cohort<tree2::Plant> > obj_);
RcppExport SEXP tree2_Cohort__plant__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Cohort<tree2::Plant> > >::type obj_(obj_SEXP );
        tree2::Plant __result = Cohort__plant__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Cohort__height__get
double Cohort__height__get(tree2::RcppR6::RcppR6<tree2::Cohort<tree2::Plant> > obj_);
RcppExport SEXP tree2_Cohort__height__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Cohort<tree2::Plant> > >::type obj_(obj_SEXP );
        double __result = Cohort__height__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Cohort__leaf_area__get
double Cohort__leaf_area__get(tree2::RcppR6::RcppR6<tree2::Cohort<tree2::Plant> > obj_);
RcppExport SEXP tree2_Cohort__leaf_area__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Cohort<tree2::Plant> > >::type obj_(obj_SEXP );
        double __result = Cohort__leaf_area__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Cohort__ode_size__get
size_t Cohort__ode_size__get(tree2::RcppR6::RcppR6<tree2::Cohort<tree2::Plant> > obj_);
RcppExport SEXP tree2_Cohort__ode_size__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Cohort<tree2::Plant> > >::type obj_(obj_SEXP );
        size_t __result = Cohort__ode_size__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Cohort__ode_values__get
ode::state_type Cohort__ode_values__get(tree2::RcppR6::RcppR6<tree2::Cohort<tree2::Plant> > obj_);
RcppExport SEXP tree2_Cohort__ode_values__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Cohort<tree2::Plant> > >::type obj_(obj_SEXP );
        ode::state_type __result = Cohort__ode_values__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Cohort__ode_values__set
void Cohort__ode_values__set(tree2::RcppR6::RcppR6<tree2::Cohort<tree2::Plant> > obj_, ode::state_type value);
RcppExport SEXP tree2_Cohort__ode_values__set(SEXP obj_SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Cohort<tree2::Plant> > >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< ode::state_type >::type value(valueSEXP );
        Cohort__ode_values__set(obj_, value);
    }
    return R_NilValue;
END_RCPP
}
// Cohort__ode_rates__get
ode::state_type Cohort__ode_rates__get(tree2::RcppR6::RcppR6<tree2::Cohort<tree2::Plant> > obj_);
RcppExport SEXP tree2_Cohort__ode_rates__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Cohort<tree2::Plant> > >::type obj_(obj_SEXP );
        ode::state_type __result = Cohort__ode_rates__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Species__ctor
tree2::Species<tree2::Cohort<tree2::Plant> > Species__ctor(tree2::Strategy strategy);
RcppExport SEXP tree2_Species__ctor(SEXP strategySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::Strategy >::type strategy(strategySEXP );
        tree2::Species<tree2::Cohort<tree2::Plant> > __result = Species__ctor(strategy);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Species__clear
void Species__clear(tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > obj_);
RcppExport SEXP tree2_Species__clear(SEXP obj_SEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        Species__clear(obj_);
    }
    return R_NilValue;
END_RCPP
}
// Species__compute_vars_phys
void Species__compute_vars_phys(tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > obj_, const tree2::Environment& environment);
RcppExport SEXP tree2_Species__compute_vars_phys(SEXP obj_SEXP, SEXP environmentSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< const tree2::Environment& >::type environment(environmentSEXP );
        Species__compute_vars_phys(obj_, environment);
    }
    return R_NilValue;
END_RCPP
}
// Species__leaf_area_above
double Species__leaf_area_above(tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > obj_, double height);
RcppExport SEXP tree2_Species__leaf_area_above(SEXP obj_SEXP, SEXP heightSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< double >::type height(heightSEXP );
        double __result = Species__leaf_area_above(obj_, height);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Species__add_seed
void Species__add_seed(tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > obj_);
RcppExport SEXP tree2_Species__add_seed(SEXP obj_SEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        Species__add_seed(obj_);
    }
    return R_NilValue;
END_RCPP
}
// Species__plant_at
tree2::Cohort<tree2::Plant> Species__plant_at(tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > obj_, util::index index);
RcppExport SEXP tree2_Species__plant_at(SEXP obj_SEXP, SEXP indexSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< util::index >::type index(indexSEXP );
        tree2::Cohort<tree2::Plant> __result = Species__plant_at(obj_, index);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Species__size__get
size_t Species__size__get(tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > obj_);
RcppExport SEXP tree2_Species__size__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        size_t __result = Species__size__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Species__seed__get
tree2::Cohort<tree2::Plant> Species__seed__get(tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > obj_);
RcppExport SEXP tree2_Species__seed__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        tree2::Cohort<tree2::Plant> __result = Species__seed__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Species__height_max__get
double Species__height_max__get(tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > obj_);
RcppExport SEXP tree2_Species__height_max__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        double __result = Species__height_max__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Species__height__get
std::vector<double> Species__height__get(tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > obj_);
RcppExport SEXP tree2_Species__height__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        std::vector<double> __result = Species__height__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Species__height__set
void Species__height__set(tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > obj_, std::vector<double> value);
RcppExport SEXP tree2_Species__height__set(SEXP obj_SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< std::vector<double> >::type value(valueSEXP );
        Species__height__set(obj_, value);
    }
    return R_NilValue;
END_RCPP
}
// Species__plants__get
std::vector<tree2::Cohort<tree2::Plant> > Species__plants__get(tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > obj_);
RcppExport SEXP tree2_Species__plants__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        std::vector<tree2::Cohort<tree2::Plant> > __result = Species__plants__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Species__leaf_area__get
std::vector<double> Species__leaf_area__get(tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > obj_);
RcppExport SEXP tree2_Species__leaf_area__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        std::vector<double> __result = Species__leaf_area__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Species__leaf_area_error__get
std::vector<double> Species__leaf_area_error__get(tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > obj_);
RcppExport SEXP tree2_Species__leaf_area_error__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        std::vector<double> __result = Species__leaf_area_error__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Species__ode_size__get
size_t Species__ode_size__get(tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > obj_);
RcppExport SEXP tree2_Species__ode_size__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        size_t __result = Species__ode_size__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Species__ode_values__get
ode::state_type Species__ode_values__get(tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > obj_);
RcppExport SEXP tree2_Species__ode_values__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        ode::state_type __result = Species__ode_values__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Species__ode_values__set
void Species__ode_values__set(tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > obj_, ode::state_type value);
RcppExport SEXP tree2_Species__ode_values__set(SEXP obj_SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< ode::state_type >::type value(valueSEXP );
        Species__ode_values__set(obj_, value);
    }
    return R_NilValue;
END_RCPP
}
// Species__ode_rates__get
ode::state_type Species__ode_rates__get(tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > obj_);
RcppExport SEXP tree2_Species__ode_rates__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Species<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        ode::state_type __result = Species__ode_rates__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Patch__ctor
tree2::Patch<tree2::Cohort<tree2::Plant> > Patch__ctor(tree2::Parameters parameters);
RcppExport SEXP tree2_Patch__ctor(SEXP parametersSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::Parameters >::type parameters(parametersSEXP );
        tree2::Patch<tree2::Cohort<tree2::Plant> > __result = Patch__ctor(parameters);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Patch__leaf_area_above
double Patch__leaf_area_above(tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > obj_, double height);
RcppExport SEXP tree2_Patch__leaf_area_above(SEXP obj_SEXP, SEXP heightSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< double >::type height(heightSEXP );
        double __result = Patch__leaf_area_above(obj_, height);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Patch__canopy_openness
double Patch__canopy_openness(tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > obj_, double height);
RcppExport SEXP tree2_Patch__canopy_openness(SEXP obj_SEXP, SEXP heightSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< double >::type height(heightSEXP );
        double __result = Patch__canopy_openness(obj_, height);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Patch__add_seed
void Patch__add_seed(tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > obj_, util::index species_index);
RcppExport SEXP tree2_Patch__add_seed(SEXP obj_SEXP, SEXP species_indexSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< util::index >::type species_index(species_indexSEXP );
        Patch__add_seed(obj_, species_index);
    }
    return R_NilValue;
END_RCPP
}
// Patch__compute_light_environment
void Patch__compute_light_environment(tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > obj_);
RcppExport SEXP tree2_Patch__compute_light_environment(SEXP obj_SEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        Patch__compute_light_environment(obj_);
    }
    return R_NilValue;
END_RCPP
}
// Patch__compute_vars_phys
void Patch__compute_vars_phys(tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > obj_);
RcppExport SEXP tree2_Patch__compute_vars_phys(SEXP obj_SEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        Patch__compute_vars_phys(obj_);
    }
    return R_NilValue;
END_RCPP
}
// Patch__reset
void Patch__reset(tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > obj_);
RcppExport SEXP tree2_Patch__reset(SEXP obj_SEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        Patch__reset(obj_);
    }
    return R_NilValue;
END_RCPP
}
// Patch__set_ode_values
void Patch__set_ode_values(tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > obj_, ode::state_type values, double time);
RcppExport SEXP tree2_Patch__set_ode_values(SEXP obj_SEXP, SEXP valuesSEXP, SEXP timeSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< ode::state_type >::type values(valuesSEXP );
        Rcpp::traits::input_parameter< double >::type time(timeSEXP );
        Patch__set_ode_values(obj_, values, time);
    }
    return R_NilValue;
END_RCPP
}
// Patch__derivs
ode::state_type Patch__derivs(tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > obj_, const ode::state_type& y, double time);
RcppExport SEXP tree2_Patch__derivs(SEXP obj_SEXP, SEXP ySEXP, SEXP timeSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        Rcpp::traits::input_parameter< const ode::state_type& >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type time(timeSEXP );
        ode::state_type __result = Patch__derivs(obj_, y, time);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Patch__size__get
size_t Patch__size__get(tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > obj_);
RcppExport SEXP tree2_Patch__size__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        size_t __result = Patch__size__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Patch__height_max__get
double Patch__height_max__get(tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > obj_);
RcppExport SEXP tree2_Patch__height_max__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        double __result = Patch__height_max__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Patch__parameters__get
tree2::Parameters Patch__parameters__get(tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > obj_);
RcppExport SEXP tree2_Patch__parameters__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        tree2::Parameters __result = Patch__parameters__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Patch__environment__get
tree2::Environment Patch__environment__get(tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > obj_);
RcppExport SEXP tree2_Patch__environment__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        tree2::Environment __result = Patch__environment__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Patch__species__get
std::vector<tree2::Species<tree2::Cohort<tree2::Plant> > > Patch__species__get(tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > obj_);
RcppExport SEXP tree2_Patch__species__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        std::vector<tree2::Species<tree2::Cohort<tree2::Plant> > > __result = Patch__species__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Patch__ode_size__get
size_t Patch__ode_size__get(tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > obj_);
RcppExport SEXP tree2_Patch__ode_size__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        size_t __result = Patch__ode_size__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Patch__ode_values__get
ode::state_type Patch__ode_values__get(tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > obj_);
RcppExport SEXP tree2_Patch__ode_values__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        ode::state_type __result = Patch__ode_values__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Patch__ode_rates__get
ode::state_type Patch__ode_rates__get(tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > obj_);
RcppExport SEXP tree2_Patch__ode_rates__get(SEXP obj_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< tree2::RcppR6::RcppR6<tree2::Patch<tree2::Cohort<tree2::Plant> > > >::type obj_(obj_SEXP );
        ode::state_type __result = Patch__ode_rates__get(obj_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_uniroot
double test_uniroot(Rcpp::Function f, double min, double max);
RcppExport SEXP tree2_test_uniroot(SEXP fSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::Function >::type f(fSEXP );
        Rcpp::traits::input_parameter< double >::type min(minSEXP );
        Rcpp::traits::input_parameter< double >::type max(maxSEXP );
        double __result = test_uniroot(f, min, max);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// set_sane_gsl_error_handling
void set_sane_gsl_error_handling();
RcppExport SEXP tree2_set_sane_gsl_error_handling() {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        set_sane_gsl_error_handling();
    }
    return R_NilValue;
END_RCPP
}
// trapezium
double trapezium(const std::vector<double>& x, const std::vector<double>& y);
RcppExport SEXP tree2_trapezium(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const std::vector<double>& >::type x(xSEXP );
        Rcpp::traits::input_parameter< const std::vector<double>& >::type y(ySEXP );
        double __result = trapezium(x, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// trapezium_vector
std::vector<double> trapezium_vector(const std::vector<double>& x, const std::vector<double>& y);
RcppExport SEXP tree2_trapezium_vector(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const std::vector<double>& >::type x(xSEXP );
        Rcpp::traits::input_parameter< const std::vector<double>& >::type y(ySEXP );
        std::vector<double> __result = trapezium_vector(x, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// local_error_integration
std::vector<double> local_error_integration(const std::vector<double>& x, const std::vector<double>& y, double scal);
RcppExport SEXP tree2_local_error_integration(SEXP xSEXP, SEXP ySEXP, SEXP scalSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const std::vector<double>& >::type x(xSEXP );
        Rcpp::traits::input_parameter< const std::vector<double>& >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type scal(scalSEXP );
        std::vector<double> __result = local_error_integration(x, y, scal);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
