// Generated by RcppR6 (0.2.1): do not edit by hand
#include <tree.h>

// [[Rcpp::export]]
tree::ode::test::Lorenz Lorenz__ctor(double sigma, double R, double b) {
  return tree::ode::test::Lorenz(sigma, R, b);
}
// [[Rcpp::export]]
size_t Lorenz__ode_size__get(tree::RcppR6::RcppR6<tree::ode::test::Lorenz> obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
tree::ode::state_type Lorenz__ode_state__get(tree::RcppR6::RcppR6<tree::ode::test::Lorenz> obj_) {
  return tree::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void Lorenz__ode_state__set(tree::RcppR6::RcppR6<tree::ode::test::Lorenz> obj_, tree::ode::state_type value) {
  tree::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
tree::ode::state_type Lorenz__ode_rates__get(tree::RcppR6::RcppR6<tree::ode::test::Lorenz> obj_) {
  return tree::ode::r_ode_rates(*obj_);
}

// [[Rcpp::export]]
std::vector<double> Lorenz__pars__get(tree::RcppR6::RcppR6<tree::ode::test::Lorenz> obj_) {
  return obj_->pars();
}


// [[Rcpp::export]]
tree::ode::test::OdeR OdeR__ctor(Rcpp::Function derivs, Rcpp::Function state, double time) {
  return tree::ode::test::OdeR(derivs, state, time);
}
// [[Rcpp::export]]
void OdeR__update_state(tree::RcppR6::RcppR6<tree::ode::test::OdeR> obj_) {
  obj_->update_state();
}

// [[Rcpp::export]]
tree::ode::Runner<tree::ode::test::Lorenz> OdeRunner___Lorenz__ctor(tree::ode::test::Lorenz obj, tree::ode::OdeControl control) {
  return tree::ode::Runner<tree::ode::test::Lorenz>(obj, control);
}
// [[Rcpp::export]]
void OdeRunner___Lorenz__advance(tree::RcppR6::RcppR6<tree::ode::Runner<tree::ode::test::Lorenz> > obj_, double time) {
  obj_->advance(time);
}
// [[Rcpp::export]]
void OdeRunner___Lorenz__advance_fixed(tree::RcppR6::RcppR6<tree::ode::Runner<tree::ode::test::Lorenz> > obj_, std::vector<double> time) {
  obj_->advance_fixed(time);
}
// [[Rcpp::export]]
void OdeRunner___Lorenz__step(tree::RcppR6::RcppR6<tree::ode::Runner<tree::ode::test::Lorenz> > obj_) {
  obj_->step();
}
// [[Rcpp::export]]
void OdeRunner___Lorenz__step_to(tree::RcppR6::RcppR6<tree::ode::Runner<tree::ode::test::Lorenz> > obj_, double time) {
  obj_->step_to(time);
}
// [[Rcpp::export]]
void OdeRunner___Lorenz__set_state(tree::RcppR6::RcppR6<tree::ode::Runner<tree::ode::test::Lorenz> > obj_, tree::ode::state_type y, double time) {
  obj_->set_state(y, time);
}
// [[Rcpp::export]]
void OdeRunner___Lorenz__set_state_from_system(tree::RcppR6::RcppR6<tree::ode::Runner<tree::ode::test::Lorenz> > obj_) {
  obj_->set_state_from_system();
}
// [[Rcpp::export]]
double OdeRunner___Lorenz__time__get(tree::RcppR6::RcppR6<tree::ode::Runner<tree::ode::test::Lorenz> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
tree::ode::state_type OdeRunner___Lorenz__state__get(tree::RcppR6::RcppR6<tree::ode::Runner<tree::ode::test::Lorenz> > obj_) {
  return obj_->state();
}

// [[Rcpp::export]]
std::vector<double> OdeRunner___Lorenz__times__get(tree::RcppR6::RcppR6<tree::ode::Runner<tree::ode::test::Lorenz> > obj_) {
  return obj_->times();
}

// [[Rcpp::export]]
tree::ode::test::Lorenz OdeRunner___Lorenz__object__get(tree::RcppR6::RcppR6<tree::ode::Runner<tree::ode::test::Lorenz> > obj_) {
  return obj_->object();
}


// [[Rcpp::export]]
tree::ode::Runner<tree::ode::test::OdeR> OdeRunner___OdeR__ctor(tree::ode::test::OdeR obj, tree::ode::OdeControl control) {
  return tree::ode::Runner<tree::ode::test::OdeR>(obj, control);
}
// [[Rcpp::export]]
void OdeRunner___OdeR__advance(tree::RcppR6::RcppR6<tree::ode::Runner<tree::ode::test::OdeR> > obj_, double time) {
  obj_->advance(time);
}
// [[Rcpp::export]]
void OdeRunner___OdeR__advance_fixed(tree::RcppR6::RcppR6<tree::ode::Runner<tree::ode::test::OdeR> > obj_, std::vector<double> time) {
  obj_->advance_fixed(time);
}
// [[Rcpp::export]]
void OdeRunner___OdeR__step(tree::RcppR6::RcppR6<tree::ode::Runner<tree::ode::test::OdeR> > obj_) {
  obj_->step();
}
// [[Rcpp::export]]
void OdeRunner___OdeR__step_to(tree::RcppR6::RcppR6<tree::ode::Runner<tree::ode::test::OdeR> > obj_, double time) {
  obj_->step_to(time);
}
// [[Rcpp::export]]
void OdeRunner___OdeR__set_state(tree::RcppR6::RcppR6<tree::ode::Runner<tree::ode::test::OdeR> > obj_, tree::ode::state_type y, double time) {
  obj_->set_state(y, time);
}
// [[Rcpp::export]]
void OdeRunner___OdeR__set_state_from_system(tree::RcppR6::RcppR6<tree::ode::Runner<tree::ode::test::OdeR> > obj_) {
  obj_->set_state_from_system();
}
// [[Rcpp::export]]
double OdeRunner___OdeR__time__get(tree::RcppR6::RcppR6<tree::ode::Runner<tree::ode::test::OdeR> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
tree::ode::state_type OdeRunner___OdeR__state__get(tree::RcppR6::RcppR6<tree::ode::Runner<tree::ode::test::OdeR> > obj_) {
  return obj_->state();
}

// [[Rcpp::export]]
std::vector<double> OdeRunner___OdeR__times__get(tree::RcppR6::RcppR6<tree::ode::Runner<tree::ode::test::OdeR> > obj_) {
  return obj_->times();
}

// [[Rcpp::export]]
tree::ode::test::OdeR OdeRunner___OdeR__object__get(tree::RcppR6::RcppR6<tree::ode::Runner<tree::ode::test::OdeR> > obj_) {
  return obj_->object();
}


// [[Rcpp::export]]
tree::ode::Runner<tree::tools::PlantRunner> OdeRunner___PlantRunner__ctor(tree::tools::PlantRunner obj, tree::ode::OdeControl control) {
  return tree::ode::Runner<tree::tools::PlantRunner>(obj, control);
}
// [[Rcpp::export]]
void OdeRunner___PlantRunner__advance(tree::RcppR6::RcppR6<tree::ode::Runner<tree::tools::PlantRunner> > obj_, double time) {
  obj_->advance(time);
}
// [[Rcpp::export]]
void OdeRunner___PlantRunner__advance_fixed(tree::RcppR6::RcppR6<tree::ode::Runner<tree::tools::PlantRunner> > obj_, std::vector<double> time) {
  obj_->advance_fixed(time);
}
// [[Rcpp::export]]
void OdeRunner___PlantRunner__step(tree::RcppR6::RcppR6<tree::ode::Runner<tree::tools::PlantRunner> > obj_) {
  obj_->step();
}
// [[Rcpp::export]]
void OdeRunner___PlantRunner__step_to(tree::RcppR6::RcppR6<tree::ode::Runner<tree::tools::PlantRunner> > obj_, double time) {
  obj_->step_to(time);
}
// [[Rcpp::export]]
void OdeRunner___PlantRunner__set_state(tree::RcppR6::RcppR6<tree::ode::Runner<tree::tools::PlantRunner> > obj_, tree::ode::state_type y, double time) {
  obj_->set_state(y, time);
}
// [[Rcpp::export]]
void OdeRunner___PlantRunner__set_state_from_system(tree::RcppR6::RcppR6<tree::ode::Runner<tree::tools::PlantRunner> > obj_) {
  obj_->set_state_from_system();
}
// [[Rcpp::export]]
double OdeRunner___PlantRunner__time__get(tree::RcppR6::RcppR6<tree::ode::Runner<tree::tools::PlantRunner> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
tree::ode::state_type OdeRunner___PlantRunner__state__get(tree::RcppR6::RcppR6<tree::ode::Runner<tree::tools::PlantRunner> > obj_) {
  return obj_->state();
}

// [[Rcpp::export]]
std::vector<double> OdeRunner___PlantRunner__times__get(tree::RcppR6::RcppR6<tree::ode::Runner<tree::tools::PlantRunner> > obj_) {
  return obj_->times();
}

// [[Rcpp::export]]
tree::tools::PlantRunner OdeRunner___PlantRunner__object__get(tree::RcppR6::RcppR6<tree::ode::Runner<tree::tools::PlantRunner> > obj_) {
  return obj_->object();
}


// [[Rcpp::export]]
tree::CohortScheduleEvent CohortScheduleEvent__ctor(double introduction, tree::util::index species_index) {
  return tree::CohortScheduleEvent(introduction, species_index);
}
// [[Rcpp::export]]
tree::util::index CohortScheduleEvent__species_index__get(tree::RcppR6::RcppR6<tree::CohortScheduleEvent> obj_) {
  return obj_->species_index;
}
// [[Rcpp::export]]
void CohortScheduleEvent__species_index__set(tree::RcppR6::RcppR6<tree::CohortScheduleEvent> obj_, tree::util::index value) {
  obj_->species_index = value;
}

// [[Rcpp::export]]
std::vector<double> CohortScheduleEvent__times__get(tree::RcppR6::RcppR6<tree::CohortScheduleEvent> obj_) {
  return obj_->times;
}

// [[Rcpp::export]]
double CohortScheduleEvent__time_introduction__get(tree::RcppR6::RcppR6<tree::CohortScheduleEvent> obj_) {
  return obj_->time_introduction();
}

// [[Rcpp::export]]
double CohortScheduleEvent__time_end__get(tree::RcppR6::RcppR6<tree::CohortScheduleEvent> obj_) {
  return obj_->time_end();
}

// [[Rcpp::export]]
size_t CohortScheduleEvent__species_index_raw__get(tree::RcppR6::RcppR6<tree::CohortScheduleEvent> obj_) {
  return obj_->species_index_raw();
}


// [[Rcpp::export]]
tree::CohortSchedule CohortSchedule__ctor(size_t n_species) {
  return tree::CohortSchedule(n_species);
}
// [[Rcpp::export]]
tree::CohortSchedule CohortSchedule__expand(tree::RcppR6::RcppR6<tree::CohortSchedule> obj_, size_t n_extra, std::vector<double> times) {
  return obj_->expand(n_extra, times);
}
// [[Rcpp::export]]
void CohortSchedule__clear_times(tree::RcppR6::RcppR6<tree::CohortSchedule> obj_, tree::util::index species_index) {
  obj_->clear_times(species_index);
}
// [[Rcpp::export]]
void CohortSchedule__clear_ode_times(tree::RcppR6::RcppR6<tree::CohortSchedule> obj_) {
  obj_->r_clear_ode_times();
}
// [[Rcpp::export]]
void CohortSchedule__set_times(tree::RcppR6::RcppR6<tree::CohortSchedule> obj_, std::vector<double> times, tree::util::index species_index) {
  obj_->r_set_times(times, species_index);
}
// [[Rcpp::export]]
std::vector<double> CohortSchedule__times(tree::RcppR6::RcppR6<tree::CohortSchedule> obj_, tree::util::index species_index) {
  return obj_->r_times(species_index);
}
// [[Rcpp::export]]
void CohortSchedule__reset(tree::RcppR6::RcppR6<tree::CohortSchedule> obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
void CohortSchedule__pop(tree::RcppR6::RcppR6<tree::CohortSchedule> obj_) {
  obj_->pop();
}
// [[Rcpp::export]]
tree::CohortSchedule CohortSchedule__copy(tree::RcppR6::RcppR6<tree::CohortSchedule> obj_) {
  return obj_->r_copy();
}
// [[Rcpp::export]]
size_t CohortSchedule__size__get(tree::RcppR6::RcppR6<tree::CohortSchedule> obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
size_t CohortSchedule__n_species__get(tree::RcppR6::RcppR6<tree::CohortSchedule> obj_) {
  return obj_->get_n_species();
}

// [[Rcpp::export]]
tree::CohortScheduleEvent CohortSchedule__next_event__get(tree::RcppR6::RcppR6<tree::CohortSchedule> obj_) {
  return obj_->next_event();
}

// [[Rcpp::export]]
size_t CohortSchedule__remaining__get(tree::RcppR6::RcppR6<tree::CohortSchedule> obj_) {
  return obj_->remaining();
}

// [[Rcpp::export]]
double CohortSchedule__max_time__get(tree::RcppR6::RcppR6<tree::CohortSchedule> obj_) {
  return obj_->get_max_time();
}
// [[Rcpp::export]]
void CohortSchedule__max_time__set(tree::RcppR6::RcppR6<tree::CohortSchedule> obj_, double value) {
  obj_->r_set_max_time(value);
}

// [[Rcpp::export]]
std::vector<double> CohortSchedule__ode_times__get(tree::RcppR6::RcppR6<tree::CohortSchedule> obj_) {
  return obj_->r_ode_times();
}
// [[Rcpp::export]]
void CohortSchedule__ode_times__set(tree::RcppR6::RcppR6<tree::CohortSchedule> obj_, std::vector<double> value) {
  obj_->r_set_ode_times(value);
}

// [[Rcpp::export]]
bool CohortSchedule__use_ode_times__get(tree::RcppR6::RcppR6<tree::CohortSchedule> obj_) {
  return obj_->using_ode_times();
}
// [[Rcpp::export]]
void CohortSchedule__use_ode_times__set(tree::RcppR6::RcppR6<tree::CohortSchedule> obj_, bool value) {
  obj_->r_set_use_ode_times(value);
}

// [[Rcpp::export]]
SEXP CohortSchedule__all_times__get(tree::RcppR6::RcppR6<tree::CohortSchedule> obj_) {
  return obj_->r_all_times();
}
// [[Rcpp::export]]
void CohortSchedule__all_times__set(tree::RcppR6::RcppR6<tree::CohortSchedule> obj_, SEXP value) {
  obj_->r_set_all_times(value);
}


// [[Rcpp::export]]
tree::Disturbance Disturbance__ctor(double mean_interval) {
  return tree::Disturbance(mean_interval);
}
// [[Rcpp::export]]
double Disturbance__density(tree::RcppR6::RcppR6<tree::Disturbance> obj_, double time) {
  return obj_->density(time);
}
// [[Rcpp::export]]
double Disturbance__pr_survival(tree::RcppR6::RcppR6<tree::Disturbance> obj_, double time) {
  return obj_->pr_survival(time);
}
// [[Rcpp::export]]
double Disturbance__pr_survival_conditional(tree::RcppR6::RcppR6<tree::Disturbance> obj_, double time, double time_start) {
  return obj_->pr_survival_conditional(time, time_start);
}
// [[Rcpp::export]]
double Disturbance__cdf(tree::RcppR6::RcppR6<tree::Disturbance> obj_, double time) {
  return obj_->cdf(time);
}
// [[Rcpp::export]]
double Disturbance__mean_interval__get(tree::RcppR6::RcppR6<tree::Disturbance> obj_) {
  return obj_->r_mean_interval();
}


// [[Rcpp::export]]
SEXP Control__ctor() {
  return Rcpp::wrap(tree::Control());
}


// [[Rcpp::export]]
SEXP OdeControl__ctor() {
  return Rcpp::wrap(tree::ode::OdeControl());
}


// [[Rcpp::export]]
tree::quadrature::QK QK__ctor(size_t rule) {
  return tree::quadrature::QK(rule);
}
// [[Rcpp::export]]
double QK__integrate(tree::RcppR6::RcppR6<tree::quadrature::QK> obj_, SEXP f, double a, double b) {
  return obj_->r_integrate(f, a, b);
}
// [[Rcpp::export]]
std::vector<double> QK__integrate_vector_x(tree::RcppR6::RcppR6<tree::quadrature::QK> obj_, double a, double b) {
  return obj_->integrate_vector_x(a, b);
}
// [[Rcpp::export]]
double QK__integrate_vector(tree::RcppR6::RcppR6<tree::quadrature::QK> obj_, std::vector<double> y, double a, double b) {
  return obj_->integrate_vector(y, a, b);
}
// [[Rcpp::export]]
double QK__last_area__get(tree::RcppR6::RcppR6<tree::quadrature::QK> obj_) {
  return obj_->get_last_area();
}

// [[Rcpp::export]]
double QK__last_error__get(tree::RcppR6::RcppR6<tree::quadrature::QK> obj_) {
  return obj_->get_last_error();
}

// [[Rcpp::export]]
double QK__last_area_abs__get(tree::RcppR6::RcppR6<tree::quadrature::QK> obj_) {
  return obj_->get_last_area_abs();
}

// [[Rcpp::export]]
double QK__last_area_asc__get(tree::RcppR6::RcppR6<tree::quadrature::QK> obj_) {
  return obj_->get_last_area_asc();
}


// [[Rcpp::export]]
tree::quadrature::QAG QAG__ctor(size_t rule, size_t max_iterations, double atol, double rtol) {
  return tree::quadrature::QAG(rule, max_iterations, atol, rtol);
}
// [[Rcpp::export]]
double QAG__integrate(tree::RcppR6::RcppR6<tree::quadrature::QAG> obj_, SEXP f, double a, double b) {
  return obj_->r_integrate(f, a, b);
}
// [[Rcpp::export]]
double QAG__integrate_with_intervals(tree::RcppR6::RcppR6<tree::quadrature::QAG> obj_, SEXP f, SEXP intervals) {
  return obj_->r_integrate_with_intervals(f, intervals);
}
// [[Rcpp::export]]
double QAG__integrate_with_last_intervals(tree::RcppR6::RcppR6<tree::quadrature::QAG> obj_, SEXP f, double a, double b) {
  return obj_->r_integrate_with_last_intervals(f, a, b);
}
// [[Rcpp::export]]
double QAG__last_area__get(tree::RcppR6::RcppR6<tree::quadrature::QAG> obj_) {
  return obj_->get_last_area();
}

// [[Rcpp::export]]
double QAG__last_error__get(tree::RcppR6::RcppR6<tree::quadrature::QAG> obj_) {
  return obj_->get_last_error();
}

// [[Rcpp::export]]
size_t QAG__last_iterations__get(tree::RcppR6::RcppR6<tree::quadrature::QAG> obj_) {
  return obj_->get_last_iterations();
}

// [[Rcpp::export]]
tree::quadrature::intervals_type QAG__last_intervals__get(tree::RcppR6::RcppR6<tree::quadrature::QAG> obj_) {
  return obj_->get_last_intervals();
}

// [[Rcpp::export]]
bool QAG__is_adaptive__get(tree::RcppR6::RcppR6<tree::quadrature::QAG> obj_) {
  return obj_->is_adaptive();
}


// [[Rcpp::export]]
tree::interpolator::Interpolator Interpolator__ctor() {
  return tree::interpolator::Interpolator();
}
// [[Rcpp::export]]
void Interpolator__init(tree::RcppR6::RcppR6<tree::interpolator::Interpolator> obj_, const std::vector<double>& x, const std::vector<double>& y) {
  obj_->init(x, y);
}
// [[Rcpp::export]]
std::vector<double> Interpolator__eval(tree::RcppR6::RcppR6<tree::interpolator::Interpolator> obj_, std::vector<double> x) {
  return obj_->r_eval(x);
}
// [[Rcpp::export]]
std::vector<double> Interpolator__x__get(tree::RcppR6::RcppR6<tree::interpolator::Interpolator> obj_) {
  return obj_->get_x();
}

// [[Rcpp::export]]
std::vector<double> Interpolator__y__get(tree::RcppR6::RcppR6<tree::interpolator::Interpolator> obj_) {
  return obj_->get_y();
}

// [[Rcpp::export]]
SEXP Interpolator__xy__get(tree::RcppR6::RcppR6<tree::interpolator::Interpolator> obj_) {
  return obj_->r_get_xy();
}

// [[Rcpp::export]]
size_t Interpolator__size__get(tree::RcppR6::RcppR6<tree::interpolator::Interpolator> obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
double Interpolator__min__get(tree::RcppR6::RcppR6<tree::interpolator::Interpolator> obj_) {
  return obj_->min();
}

// [[Rcpp::export]]
double Interpolator__max__get(tree::RcppR6::RcppR6<tree::interpolator::Interpolator> obj_) {
  return obj_->max();
}


// [[Rcpp::export]]
tree::Environment Environment__ctor(tree::FFW16_Parameters p) {
  return tree::Environment(p);
}
// [[Rcpp::export]]
double Environment__canopy_openness(tree::RcppR6::RcppR6<tree::Environment> obj_, double height) {
  return obj_->canopy_openness(height);
}
// [[Rcpp::export]]
double Environment__patch_survival_conditional(tree::RcppR6::RcppR6<tree::Environment> obj_, double time_at_birth) {
  return obj_->patch_survival_conditional(time_at_birth);
}
// [[Rcpp::export]]
void Environment__clear(tree::RcppR6::RcppR6<tree::Environment> obj_) {
  obj_->clear();
}
// [[Rcpp::export]]
void Environment__set_seed_rain_index(tree::RcppR6::RcppR6<tree::Environment> obj_, tree::util::index x) {
  obj_->r_set_seed_rain_index(x);
}
// [[Rcpp::export]]
double Environment__patch_survival__get(tree::RcppR6::RcppR6<tree::Environment> obj_) {
  return obj_->patch_survival();
}

// [[Rcpp::export]]
double Environment__seed_rain_dt__get(tree::RcppR6::RcppR6<tree::Environment> obj_) {
  return obj_->seed_rain_dt();
}

// [[Rcpp::export]]
tree::Disturbance Environment__disturbance_regime__get(tree::RcppR6::RcppR6<tree::Environment> obj_) {
  return obj_->disturbance_regime;
}
// [[Rcpp::export]]
void Environment__disturbance_regime__set(tree::RcppR6::RcppR6<tree::Environment> obj_, tree::Disturbance value) {
  obj_->disturbance_regime = value;
}

// [[Rcpp::export]]
double Environment__time__get(tree::RcppR6::RcppR6<tree::Environment> obj_) {
  return obj_->time;
}
// [[Rcpp::export]]
void Environment__time__set(tree::RcppR6::RcppR6<tree::Environment> obj_, double value) {
  obj_->time = value;
}

// [[Rcpp::export]]
tree::interpolator::Interpolator Environment__light_environment__get(tree::RcppR6::RcppR6<tree::Environment> obj_) {
  return obj_->light_environment;
}
// [[Rcpp::export]]
void Environment__light_environment__set(tree::RcppR6::RcppR6<tree::Environment> obj_, tree::interpolator::Interpolator value) {
  obj_->light_environment = value;
}


// [[Rcpp::export]]
SEXP Plant_internals__ctor() {
  return Rcpp::wrap(tree::Plant_internals());
}


// [[Rcpp::export]]
tree::Plant<tree::FFW16_Strategy> Plant___FFW16__ctor(tree::FFW16_Strategy s) {
  return tree::make_plant<tree::FFW16_Strategy>(s);
}
// [[Rcpp::export]]
double Plant___FFW16__area_leaf_above(tree::RcppR6::RcppR6<tree::Plant<tree::FFW16_Strategy> > obj_, double h) {
  return obj_->area_leaf_above(h);
}
// [[Rcpp::export]]
void Plant___FFW16__compute_vars_phys(tree::RcppR6::RcppR6<tree::Plant<tree::FFW16_Strategy> > obj_, const tree::Environment& environment) {
  obj_->compute_vars_phys(environment);
}
// [[Rcpp::export]]
double Plant___FFW16__germination_probability(tree::RcppR6::RcppR6<tree::Plant<tree::FFW16_Strategy> > obj_, const tree::Environment& environment) {
  return obj_->germination_probability(environment);
}
// [[Rcpp::export]]
double Plant___FFW16__height__get(tree::RcppR6::RcppR6<tree::Plant<tree::FFW16_Strategy> > obj_) {
  return obj_->height();
}
// [[Rcpp::export]]
void Plant___FFW16__height__set(tree::RcppR6::RcppR6<tree::Plant<tree::FFW16_Strategy> > obj_, double value) {
  obj_->set_height(value);
}

// [[Rcpp::export]]
double Plant___FFW16__mortality__get(tree::RcppR6::RcppR6<tree::Plant<tree::FFW16_Strategy> > obj_) {
  return obj_->mortality();
}
// [[Rcpp::export]]
void Plant___FFW16__mortality__set(tree::RcppR6::RcppR6<tree::Plant<tree::FFW16_Strategy> > obj_, double value) {
  obj_->set_mortality(value);
}

// [[Rcpp::export]]
double Plant___FFW16__fecundity__get(tree::RcppR6::RcppR6<tree::Plant<tree::FFW16_Strategy> > obj_) {
  return obj_->fecundity();
}
// [[Rcpp::export]]
void Plant___FFW16__fecundity__set(tree::RcppR6::RcppR6<tree::Plant<tree::FFW16_Strategy> > obj_, double value) {
  obj_->set_fecundity(value);
}

// [[Rcpp::export]]
tree::FFW16_Strategy Plant___FFW16__strategy__get(tree::RcppR6::RcppR6<tree::Plant<tree::FFW16_Strategy> > obj_) {
  return obj_->r_get_strategy();
}

// [[Rcpp::export]]
tree::Plant<tree::FFW16_Strategy>::internals Plant___FFW16__internals__get(tree::RcppR6::RcppR6<tree::Plant<tree::FFW16_Strategy> > obj_) {
  return obj_->r_internals();
}

// [[Rcpp::export]]
size_t Plant___FFW16__ode_size__get(tree::RcppR6::RcppR6<tree::Plant<tree::FFW16_Strategy> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
tree::ode::state_type Plant___FFW16__ode_state__get(tree::RcppR6::RcppR6<tree::Plant<tree::FFW16_Strategy> > obj_) {
  return tree::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void Plant___FFW16__ode_state__set(tree::RcppR6::RcppR6<tree::Plant<tree::FFW16_Strategy> > obj_, tree::ode::state_type value) {
  tree::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
tree::ode::state_type Plant___FFW16__ode_rates__get(tree::RcppR6::RcppR6<tree::Plant<tree::FFW16_Strategy> > obj_) {
  return tree::ode::r_ode_rates(*obj_);
}

// [[Rcpp::export]]
std::vector<std::string> Plant___FFW16__ode_names__get(tree::RcppR6::RcppR6<tree::Plant<tree::FFW16_Strategy> > obj_) {
  return obj_->ode_names();
}


// [[Rcpp::export]]
tree::tools::PlantRunner PlantRunner__ctor(tree::FFW16_PlantPlus plant, tree::Environment environment) {
  return tree::tools::PlantRunner(plant, environment);
}
// [[Rcpp::export]]
tree::FFW16_PlantPlus PlantRunner__plant__get(tree::RcppR6::RcppR6<tree::tools::PlantRunner> obj_) {
  return obj_->plant;
}
// [[Rcpp::export]]
void PlantRunner__plant__set(tree::RcppR6::RcppR6<tree::tools::PlantRunner> obj_, tree::FFW16_PlantPlus value) {
  obj_->plant = value;
}


// [[Rcpp::export]]
SEXP FFW16_Strategy__ctor() {
  return Rcpp::wrap(tree::FFW16_Strategy());
}


// [[Rcpp::export]]
SEXP FFW16_Parameters__ctor() {
  return Rcpp::wrap(tree::FFW16_Parameters());
}

// [[Rcpp::export]]
SEXP FFW16_Parameters__vdor(SEXP obj) {
  return Rcpp::wrap(Rcpp::as<tree::FFW16_Parameters>(obj));
}


// [[Rcpp::export]]
tree::FFW16_PlantPlus FFW16_PlantPlus__ctor(tree::FFW16_Strategy strategy) {
  return tree::make_plant_plus(strategy);
}
// [[Rcpp::export]]
double FFW16_PlantPlus__area_leaf_above(tree::RcppR6::RcppR6<tree::FFW16_PlantPlus> obj_, double h) {
  return obj_->area_leaf_above(h);
}
// [[Rcpp::export]]
void FFW16_PlantPlus__compute_vars_phys(tree::RcppR6::RcppR6<tree::FFW16_PlantPlus> obj_, const tree::Environment& environment) {
  obj_->compute_vars_phys(environment);
}
// [[Rcpp::export]]
void FFW16_PlantPlus__compute_vars_growth(tree::RcppR6::RcppR6<tree::FFW16_PlantPlus> obj_) {
  obj_->compute_vars_growth();
}
// [[Rcpp::export]]
double FFW16_PlantPlus__germination_probability(tree::RcppR6::RcppR6<tree::FFW16_PlantPlus> obj_, const tree::Environment& environment) {
  return obj_->germination_probability(environment);
}
// [[Rcpp::export]]
double FFW16_PlantPlus__height__get(tree::RcppR6::RcppR6<tree::FFW16_PlantPlus> obj_) {
  return obj_->height();
}
// [[Rcpp::export]]
void FFW16_PlantPlus__height__set(tree::RcppR6::RcppR6<tree::FFW16_PlantPlus> obj_, double value) {
  obj_->set_height(value);
}

// [[Rcpp::export]]
double FFW16_PlantPlus__mortality__get(tree::RcppR6::RcppR6<tree::FFW16_PlantPlus> obj_) {
  return obj_->mortality();
}
// [[Rcpp::export]]
void FFW16_PlantPlus__mortality__set(tree::RcppR6::RcppR6<tree::FFW16_PlantPlus> obj_, double value) {
  obj_->set_mortality(value);
}

// [[Rcpp::export]]
double FFW16_PlantPlus__fecundity__get(tree::RcppR6::RcppR6<tree::FFW16_PlantPlus> obj_) {
  return obj_->fecundity();
}
// [[Rcpp::export]]
void FFW16_PlantPlus__fecundity__set(tree::RcppR6::RcppR6<tree::FFW16_PlantPlus> obj_, double value) {
  obj_->set_fecundity(value);
}

// [[Rcpp::export]]
double FFW16_PlantPlus__area_heartwood__get(tree::RcppR6::RcppR6<tree::FFW16_PlantPlus> obj_) {
  return obj_->area_heartwood();
}
// [[Rcpp::export]]
void FFW16_PlantPlus__area_heartwood__set(tree::RcppR6::RcppR6<tree::FFW16_PlantPlus> obj_, double value) {
  obj_->set_area_heartwood(value);
}

// [[Rcpp::export]]
double FFW16_PlantPlus__mass_heartwood__get(tree::RcppR6::RcppR6<tree::FFW16_PlantPlus> obj_) {
  return obj_->mass_heartwood();
}
// [[Rcpp::export]]
void FFW16_PlantPlus__mass_heartwood__set(tree::RcppR6::RcppR6<tree::FFW16_PlantPlus> obj_, double value) {
  obj_->set_mass_heartwood(value);
}

// [[Rcpp::export]]
double FFW16_PlantPlus__area_leaf__get(tree::RcppR6::RcppR6<tree::FFW16_PlantPlus> obj_) {
  return obj_->area_leaf();
}

// [[Rcpp::export]]
tree::FFW16_Strategy FFW16_PlantPlus__strategy__get(tree::RcppR6::RcppR6<tree::FFW16_PlantPlus> obj_) {
  return obj_->r_get_strategy();
}

// [[Rcpp::export]]
tree::FFW16_PlantPlus::internals FFW16_PlantPlus__internals__get(tree::RcppR6::RcppR6<tree::FFW16_PlantPlus> obj_) {
  return obj_->r_internals();
}

// [[Rcpp::export]]
size_t FFW16_PlantPlus__ode_size__get(tree::RcppR6::RcppR6<tree::FFW16_PlantPlus> obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
tree::ode::state_type FFW16_PlantPlus__ode_state__get(tree::RcppR6::RcppR6<tree::FFW16_PlantPlus> obj_) {
  return tree::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void FFW16_PlantPlus__ode_state__set(tree::RcppR6::RcppR6<tree::FFW16_PlantPlus> obj_, tree::ode::state_type value) {
  tree::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
tree::ode::state_type FFW16_PlantPlus__ode_rates__get(tree::RcppR6::RcppR6<tree::FFW16_PlantPlus> obj_) {
  return tree::ode::r_ode_rates(*obj_);
}

// [[Rcpp::export]]
std::vector<std::string> FFW16_PlantPlus__ode_names__get(tree::RcppR6::RcppR6<tree::FFW16_PlantPlus> obj_) {
  return obj_->ode_names();
}


// [[Rcpp::export]]
SEXP FFW16_PlantPlus_internals__ctor() {
  return Rcpp::wrap(tree::FFW16_PlantPlus::internals());
}


// [[Rcpp::export]]
tree::Cohort<tree::FFW16_Plant> FFW16_Cohort__ctor(tree::FFW16_Strategy strategy) {
  return tree::make_cohort<tree::FFW16_Plant>(strategy);
}
// [[Rcpp::export]]
double FFW16_Cohort__area_leaf_above(tree::RcppR6::RcppR6<tree::Cohort<tree::FFW16_Plant> > obj_, double height) {
  return obj_->area_leaf_above(height);
}
// [[Rcpp::export]]
double FFW16_Cohort__growth_rate_gradient(tree::RcppR6::RcppR6<tree::Cohort<tree::FFW16_Plant> > obj_, const tree::Environment& environment) {
  return obj_->r_growth_rate_gradient(environment);
}
// [[Rcpp::export]]
void FFW16_Cohort__compute_vars_phys(tree::RcppR6::RcppR6<tree::Cohort<tree::FFW16_Plant> > obj_, const tree::Environment& environment) {
  obj_->compute_vars_phys(environment);
}
// [[Rcpp::export]]
void FFW16_Cohort__compute_initial_conditions(tree::RcppR6::RcppR6<tree::Cohort<tree::FFW16_Plant> > obj_, const tree::Environment& environment) {
  obj_->compute_initial_conditions(environment);
}
// [[Rcpp::export]]
tree::FFW16_Plant FFW16_Cohort__plant__get(tree::RcppR6::RcppR6<tree::Cohort<tree::FFW16_Plant> > obj_) {
  return obj_->plant;
}

// [[Rcpp::export]]
double FFW16_Cohort__height__get(tree::RcppR6::RcppR6<tree::Cohort<tree::FFW16_Plant> > obj_) {
  return obj_->height();
}

// [[Rcpp::export]]
double FFW16_Cohort__log_density__get(tree::RcppR6::RcppR6<tree::Cohort<tree::FFW16_Plant> > obj_) {
  return obj_->get_log_density();
}

// [[Rcpp::export]]
double FFW16_Cohort__area_leaf__get(tree::RcppR6::RcppR6<tree::Cohort<tree::FFW16_Plant> > obj_) {
  return obj_->area_leaf();
}

// [[Rcpp::export]]
double FFW16_Cohort__fecundity__get(tree::RcppR6::RcppR6<tree::Cohort<tree::FFW16_Plant> > obj_) {
  return obj_->fecundity();
}

// [[Rcpp::export]]
size_t FFW16_Cohort__ode_size__get(tree::RcppR6::RcppR6<tree::Cohort<tree::FFW16_Plant> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
tree::ode::state_type FFW16_Cohort__ode_state__get(tree::RcppR6::RcppR6<tree::Cohort<tree::FFW16_Plant> > obj_) {
  return tree::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void FFW16_Cohort__ode_state__set(tree::RcppR6::RcppR6<tree::Cohort<tree::FFW16_Plant> > obj_, tree::ode::state_type value) {
  tree::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
tree::ode::state_type FFW16_Cohort__ode_rates__get(tree::RcppR6::RcppR6<tree::Cohort<tree::FFW16_Plant> > obj_) {
  return tree::ode::r_ode_rates(*obj_);
}


// [[Rcpp::export]]
tree::Species<tree::FFW16_Plant> FFW16_Species__ctor(tree::FFW16_Strategy strategy) {
  return tree::Species<tree::FFW16_Plant>(strategy);
}
// [[Rcpp::export]]
void FFW16_Species__clear(tree::RcppR6::RcppR6<tree::Species<tree::FFW16_Plant> > obj_) {
  obj_->clear();
}
// [[Rcpp::export]]
void FFW16_Species__compute_vars_phys(tree::RcppR6::RcppR6<tree::Species<tree::FFW16_Plant> > obj_, const tree::Environment& environment) {
  obj_->compute_vars_phys(environment);
}
// [[Rcpp::export]]
double FFW16_Species__area_leaf_above(tree::RcppR6::RcppR6<tree::Species<tree::FFW16_Plant> > obj_, double height) {
  return obj_->area_leaf_above(height);
}
// [[Rcpp::export]]
void FFW16_Species__add_seed(tree::RcppR6::RcppR6<tree::Species<tree::FFW16_Plant> > obj_) {
  obj_->add_seed();
}
// [[Rcpp::export]]
tree::Cohort<tree::FFW16_Plant> FFW16_Species__plant_at(tree::RcppR6::RcppR6<tree::Species<tree::FFW16_Plant> > obj_, tree::util::index index) {
  return obj_->r_plant_at(index);
}
// [[Rcpp::export]]
std::vector<double> FFW16_Species__area_leafs_error(tree::RcppR6::RcppR6<tree::Species<tree::FFW16_Plant> > obj_, double scal) {
  return obj_->r_area_leafs_error(scal);
}
// [[Rcpp::export]]
size_t FFW16_Species__size__get(tree::RcppR6::RcppR6<tree::Species<tree::FFW16_Plant> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
tree::Cohort<tree::FFW16_Plant> FFW16_Species__seed__get(tree::RcppR6::RcppR6<tree::Species<tree::FFW16_Plant> > obj_) {
  return obj_->r_seed();
}

// [[Rcpp::export]]
double FFW16_Species__height_max__get(tree::RcppR6::RcppR6<tree::Species<tree::FFW16_Plant> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
std::vector<double> FFW16_Species__heights__get(tree::RcppR6::RcppR6<tree::Species<tree::FFW16_Plant> > obj_) {
  return obj_->r_heights();
}
// [[Rcpp::export]]
void FFW16_Species__heights__set(tree::RcppR6::RcppR6<tree::Species<tree::FFW16_Plant> > obj_, std::vector<double> value) {
  obj_->r_set_heights(value);
}

// [[Rcpp::export]]
std::vector<tree::Cohort<tree::FFW16_Plant> > FFW16_Species__plants__get(tree::RcppR6::RcppR6<tree::Species<tree::FFW16_Plant> > obj_) {
  return obj_->r_plants();
}

// [[Rcpp::export]]
std::vector<double> FFW16_Species__seeds__get(tree::RcppR6::RcppR6<tree::Species<tree::FFW16_Plant> > obj_) {
  return obj_->seeds();
}

// [[Rcpp::export]]
std::vector<double> FFW16_Species__area_leafs__get(tree::RcppR6::RcppR6<tree::Species<tree::FFW16_Plant> > obj_) {
  return obj_->r_area_leafs();
}

// [[Rcpp::export]]
size_t FFW16_Species__ode_size__get(tree::RcppR6::RcppR6<tree::Species<tree::FFW16_Plant> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
tree::ode::state_type FFW16_Species__ode_state__get(tree::RcppR6::RcppR6<tree::Species<tree::FFW16_Plant> > obj_) {
  return tree::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void FFW16_Species__ode_state__set(tree::RcppR6::RcppR6<tree::Species<tree::FFW16_Plant> > obj_, tree::ode::state_type value) {
  tree::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
tree::ode::state_type FFW16_Species__ode_rates__get(tree::RcppR6::RcppR6<tree::Species<tree::FFW16_Plant> > obj_) {
  return tree::ode::r_ode_rates(*obj_);
}


// [[Rcpp::export]]
tree::Patch<tree::FFW16_Plant> FFW16_Patch__ctor(tree::FFW16_Parameters parameters) {
  return tree::Patch<tree::FFW16_Plant>(parameters);
}
// [[Rcpp::export]]
double FFW16_Patch__area_leaf_above(tree::RcppR6::RcppR6<tree::Patch<tree::FFW16_Plant> > obj_, double height) {
  return obj_->area_leaf_above(height);
}
// [[Rcpp::export]]
double FFW16_Patch__canopy_openness(tree::RcppR6::RcppR6<tree::Patch<tree::FFW16_Plant> > obj_, double height) {
  return obj_->canopy_openness(height);
}
// [[Rcpp::export]]
void FFW16_Patch__add_seed(tree::RcppR6::RcppR6<tree::Patch<tree::FFW16_Plant> > obj_, tree::util::index species_index) {
  obj_->r_add_seed(species_index);
}
// [[Rcpp::export]]
void FFW16_Patch__compute_light_environment(tree::RcppR6::RcppR6<tree::Patch<tree::FFW16_Plant> > obj_) {
  obj_->r_compute_light_environment();
}
// [[Rcpp::export]]
void FFW16_Patch__compute_vars_phys(tree::RcppR6::RcppR6<tree::Patch<tree::FFW16_Plant> > obj_) {
  obj_->r_compute_vars_phys();
}
// [[Rcpp::export]]
void FFW16_Patch__reset(tree::RcppR6::RcppR6<tree::Patch<tree::FFW16_Plant> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
void FFW16_Patch__set_ode_state(tree::RcppR6::RcppR6<tree::Patch<tree::FFW16_Plant> > obj_, tree::ode::state_type values, double time) {
  tree::ode::r_set_ode_state(*obj_, values, time);
}
// [[Rcpp::export]]
tree::ode::state_type FFW16_Patch__derivs(tree::RcppR6::RcppR6<tree::Patch<tree::FFW16_Plant> > obj_, const tree::ode::state_type& y, double time) {
  return tree::ode::r_derivs(*obj_, y, time);
}
// [[Rcpp::export]]
void FFW16_Patch__set_state(tree::RcppR6::RcppR6<tree::Patch<tree::FFW16_Plant> > obj_, double time, const std::vector<double>& state, const std::vector<size_t>& n) {
  obj_->r_set_state(time, state, n);
}
// [[Rcpp::export]]
double FFW16_Patch__time__get(tree::RcppR6::RcppR6<tree::Patch<tree::FFW16_Plant> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
size_t FFW16_Patch__size__get(tree::RcppR6::RcppR6<tree::Patch<tree::FFW16_Plant> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
double FFW16_Patch__height_max__get(tree::RcppR6::RcppR6<tree::Patch<tree::FFW16_Plant> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
tree::FFW16_Parameters FFW16_Patch__parameters__get(tree::RcppR6::RcppR6<tree::Patch<tree::FFW16_Plant> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
tree::Environment FFW16_Patch__environment__get(tree::RcppR6::RcppR6<tree::Patch<tree::FFW16_Plant> > obj_) {
  return obj_->r_environment();
}

// [[Rcpp::export]]
std::vector<tree::Species<tree::FFW16_Plant> > FFW16_Patch__species__get(tree::RcppR6::RcppR6<tree::Patch<tree::FFW16_Plant> > obj_) {
  return obj_->r_species();
}

// [[Rcpp::export]]
size_t FFW16_Patch__ode_size__get(tree::RcppR6::RcppR6<tree::Patch<tree::FFW16_Plant> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
double FFW16_Patch__ode_time__get(tree::RcppR6::RcppR6<tree::Patch<tree::FFW16_Plant> > obj_) {
  return tree::ode::r_ode_time(*obj_);
}

// [[Rcpp::export]]
tree::ode::state_type FFW16_Patch__ode_state__get(tree::RcppR6::RcppR6<tree::Patch<tree::FFW16_Plant> > obj_) {
  return tree::ode::r_ode_state(*obj_);
}

// [[Rcpp::export]]
tree::ode::state_type FFW16_Patch__ode_rates__get(tree::RcppR6::RcppR6<tree::Patch<tree::FFW16_Plant> > obj_) {
  return tree::ode::r_ode_rates(*obj_);
}


// [[Rcpp::export]]
tree::EBT<tree::FFW16_Plant> FFW16_EBT__ctor(tree::FFW16_Parameters parameters) {
  return tree::EBT<tree::FFW16_Plant>(parameters);
}
// [[Rcpp::export]]
void FFW16_EBT__run(tree::RcppR6::RcppR6<tree::EBT<tree::FFW16_Plant> > obj_) {
  obj_->run();
}
// [[Rcpp::export]]
std::vector<tree::util::index> FFW16_EBT__run_next(tree::RcppR6::RcppR6<tree::EBT<tree::FFW16_Plant> > obj_) {
  return obj_->r_run_next();
}
// [[Rcpp::export]]
void FFW16_EBT__reset(tree::RcppR6::RcppR6<tree::EBT<tree::FFW16_Plant> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
double FFW16_EBT__seed_rain(tree::RcppR6::RcppR6<tree::EBT<tree::FFW16_Plant> > obj_, tree::util::index species_index) {
  return obj_->r_seed_rain(species_index);
}
// [[Rcpp::export]]
std::vector<double> FFW16_EBT__seed_rain_cohort(tree::RcppR6::RcppR6<tree::EBT<tree::FFW16_Plant> > obj_, tree::util::index species_index) {
  return obj_->r_seed_rain_cohort(species_index);
}
// [[Rcpp::export]]
std::vector<double> FFW16_EBT__area_leaf_error(tree::RcppR6::RcppR6<tree::EBT<tree::FFW16_Plant> > obj_, tree::util::index species_index) {
  return obj_->r_area_leaf_error(species_index);
}
// [[Rcpp::export]]
void FFW16_EBT__set_cohort_schedule_times(tree::RcppR6::RcppR6<tree::EBT<tree::FFW16_Plant> > obj_, std::vector<std::vector<double> > times) {
  obj_->r_set_cohort_schedule_times(times);
}
// [[Rcpp::export]]
bool FFW16_EBT__complete__get(tree::RcppR6::RcppR6<tree::EBT<tree::FFW16_Plant> > obj_) {
  return obj_->complete();
}

// [[Rcpp::export]]
double FFW16_EBT__time__get(tree::RcppR6::RcppR6<tree::EBT<tree::FFW16_Plant> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
std::vector<double> FFW16_EBT__seed_rains__get(tree::RcppR6::RcppR6<tree::EBT<tree::FFW16_Plant> > obj_) {
  return obj_->seed_rains();
}

// [[Rcpp::export]]
tree::FFW16_Parameters FFW16_EBT__parameters__get(tree::RcppR6::RcppR6<tree::EBT<tree::FFW16_Plant> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
tree::Patch<tree::FFW16_Plant> FFW16_EBT__patch__get(tree::RcppR6::RcppR6<tree::EBT<tree::FFW16_Plant> > obj_) {
  return obj_->r_patch();
}

// [[Rcpp::export]]
tree::CohortSchedule FFW16_EBT__cohort_schedule__get(tree::RcppR6::RcppR6<tree::EBT<tree::FFW16_Plant> > obj_) {
  return obj_->r_cohort_schedule();
}
// [[Rcpp::export]]
void FFW16_EBT__cohort_schedule__set(tree::RcppR6::RcppR6<tree::EBT<tree::FFW16_Plant> > obj_, tree::CohortSchedule value) {
  obj_->r_set_cohort_schedule(value);
}

// [[Rcpp::export]]
std::vector<double> FFW16_EBT__ode_times__get(tree::RcppR6::RcppR6<tree::EBT<tree::FFW16_Plant> > obj_) {
  return obj_->r_ode_times();
}

// [[Rcpp::export]]
Rcpp::List FFW16_EBT__state__get(tree::RcppR6::RcppR6<tree::EBT<tree::FFW16_Plant> > obj_) {
  return tree::get_state(*obj_);
}

// [[Rcpp::export]]
bool FFW16_EBT__use_ode_times__get(tree::RcppR6::RcppR6<tree::EBT<tree::FFW16_Plant> > obj_) {
  return obj_->r_use_ode_times();
}
// [[Rcpp::export]]
void FFW16_EBT__use_ode_times__set(tree::RcppR6::RcppR6<tree::EBT<tree::FFW16_Plant> > obj_, bool value) {
  obj_->r_set_use_ode_times(value);
}

// [[Rcpp::export]]
std::vector<std::vector<double> > FFW16_EBT__seed_rain_error__get(tree::RcppR6::RcppR6<tree::EBT<tree::FFW16_Plant> > obj_) {
  return obj_->r_seed_rain_error();
}

