// Generated by RcppR6 (0.1): do not edit by hand
#ifndef _TREE2_RCPPR6_POST_HPP_
#define _TREE2_RCPPR6_POST_HPP_

#include <Rcpp.h>
#include <tree2/RcppR6_support.hpp>

namespace tree2 {
namespace RcppR6 {
namespace traits {
template <> inline std::string   class_name_r<ode::test::Lorenz >() {return "Lorenz";}
template <> inline std::string   package_name<ode::test::Lorenz >() {return "tree2";}
template <> inline std::string generator_name<ode::test::Lorenz >() {return ".R6_Lorenz";}

template <> inline std::string   class_name_r<ode::OdeSystem<ode::test::Lorenz> >() {return "OdeRunner<Lorenz>";}
template <> inline std::string   package_name<ode::OdeSystem<ode::test::Lorenz> >() {return "tree2";}
template <> inline std::string generator_name<ode::OdeSystem<ode::test::Lorenz> >() {return ".R6_OdeRunner___Lorenz";}
}
}
}

namespace Rcpp {
template <typename T>
SEXP wrap(const tree2::RcppR6::RcppR6<T>& x) {
  return x.to_R6();
}

namespace traits {
template <typename T>
class Exporter<tree2::RcppR6::RcppR6<T> > {
public:
  Exporter(SEXP x) : obj(tree2::RcppR6::RcppR6<T>(x)) {}
  inline tree2::RcppR6::RcppR6<T> get() { return obj; }
private:
  tree2::RcppR6::RcppR6<T> obj;
};
}

template <> inline SEXP wrap(const ode::test::Lorenz& x) {
  return wrap(tree2::RcppR6::RcppR6<ode::test::Lorenz>(x));
}
template <> inline ode::test::Lorenz as(SEXP x) {
  return *(tree2::RcppR6::RcppR6<ode::test::Lorenz>(x));
}

template <> inline SEXP wrap(const ode::OdeSystem<ode::test::Lorenz>& x) {
  return wrap(tree2::RcppR6::RcppR6<ode::OdeSystem<ode::test::Lorenz> >(x));
}
template <> inline ode::OdeSystem<ode::test::Lorenz> as(SEXP x) {
  return *(tree2::RcppR6::RcppR6<ode::OdeSystem<ode::test::Lorenz> >(x));
}
}

#endif
