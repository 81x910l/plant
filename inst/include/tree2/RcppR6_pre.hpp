// Generated by RcppR6 (0.2.1): do not edit by hand
#ifndef _TREE2_RCPPR6_PRE_HPP_
#define _TREE2_RCPPR6_PRE_HPP_

#include <RcppCommon.h>


namespace tree2 {
namespace RcppR6 {
template <typename T> class RcppR6;
}
}

namespace tree2 { namespace ode { namespace test { class OdeR; } } }


namespace Rcpp {
template <typename T> SEXP wrap(const tree2::RcppR6::RcppR6<T>&);
namespace traits {
template <typename T> class Exporter<tree2::RcppR6::RcppR6<T> >;
}

template <> SEXP wrap(const tree2::ode::test::Lorenz&);
template <> tree2::ode::test::Lorenz as(SEXP);

template <> SEXP wrap(const tree2::ode::test::OdeR&);
template <> tree2::ode::test::OdeR as(SEXP);

template <> SEXP wrap(const tree2::ode::Runner<tree2::ode::test::Lorenz>&);
template <> tree2::ode::Runner<tree2::ode::test::Lorenz> as(SEXP);

template <> SEXP wrap(const tree2::ode::Runner<tree2::ode::test::OdeR>&);
template <> tree2::ode::Runner<tree2::ode::test::OdeR> as(SEXP);

template <> SEXP wrap(const tree2::ode::Runner<tree2::tools::PlantRunner>&);
template <> tree2::ode::Runner<tree2::tools::PlantRunner> as(SEXP);

template <> SEXP wrap(const tree2::CohortScheduleEvent&);
template <> tree2::CohortScheduleEvent as(SEXP);

template <> SEXP wrap(const tree2::CohortSchedule&);
template <> tree2::CohortSchedule as(SEXP);

template <> SEXP wrap(const tree2::Disturbance&);
template <> tree2::Disturbance as(SEXP);

template <> SEXP wrap(const tree2::Control&);
template <> tree2::Control as(SEXP);

template <> SEXP wrap(const tree2::ode::OdeControl&);
template <> tree2::ode::OdeControl as(SEXP);

template <> SEXP wrap(const tree2::Strategy&);
template <> tree2::Strategy as(SEXP);

template <> SEXP wrap(const tree2::Parameters&);
template <> tree2::Parameters as(SEXP);

template <> SEXP wrap(const tree2::quadrature::QK&);
template <> tree2::quadrature::QK as(SEXP);

template <> SEXP wrap(const tree2::quadrature::QAG&);
template <> tree2::quadrature::QAG as(SEXP);

template <> SEXP wrap(const tree2::interpolator::Interpolator&);
template <> tree2::interpolator::Interpolator as(SEXP);

template <> SEXP wrap(const tree2::Environment&);
template <> tree2::Environment as(SEXP);

template <> SEXP wrap(const tree2::Plant::Internals&);
template <> tree2::Plant::Internals as(SEXP);

template <> SEXP wrap(const tree2::Plant&);
template <> tree2::Plant as(SEXP);

template <> SEXP wrap(const tree2::Plant2::Internals&);
template <> tree2::Plant2::Internals as(SEXP);

template <> SEXP wrap(const tree2::Plant2&);
template <> tree2::Plant2 as(SEXP);

template <> SEXP wrap(const tree2::Cohort<tree2::Plant>&);
template <> tree2::Cohort<tree2::Plant> as(SEXP);

template <> SEXP wrap(const tree2::Species<tree2::Cohort<tree2::Plant> >&);
template <> tree2::Species<tree2::Cohort<tree2::Plant> > as(SEXP);

template <> SEXP wrap(const tree2::Patch<tree2::Cohort<tree2::Plant> >&);
template <> tree2::Patch<tree2::Cohort<tree2::Plant> > as(SEXP);

template <> SEXP wrap(const tree2::EBT<tree2::Plant>&);
template <> tree2::EBT<tree2::Plant> as(SEXP);

template <> SEXP wrap(const tree2::tools::PlantRunner&);
template <> tree2::tools::PlantRunner as(SEXP);
}

#endif
