Lorenz:
  name_cpp: "ode::test::Lorenz"
  forward_declare: true
  constructor:
    args: [sigma: double, R: double, b: double]
  active:
    size: {type: size_t, access: member}
    ode_values:
      type: "std::vector<double>"
      access: member
      name_cpp: ode_values
      name_cpp_set: set_ode_values
    ode_rates:
      type: "std::vector<double>"
      access: member
      name_cpp: r_ode_rates
    pars:
      type: "Rcpp::NumericVector"
      access: member
      name_cpp: r_get_pars

OdeSystem:
  name_cpp: "ode::OdeSystem<T>"
  templates:
    parameters: T
    concrete:
      - ["Lorenz": "ode::test::Lorenz"]
  constructor:
    args: [obj: T, abs_tol: double=1e-8, rel_tol: double=1e-8]
  methods:
    do_step:
      args: [dt: double]
      return_type: void
    try_step:
      args: [dt: double]
      return_type: bool
    advance:
      args: [t: double, dt: double]
      return_type: void
    advance_save:
      args: [t: double, dt: double]
      return_type: "ode::state_saver<std::vector<double> >"
  active:
    obj: {type: T, access: member, name_cpp: get_obj}
    t: {type: double, access: field}
    y: {type: "std::vector<double>", access: field}

CohortScheduleEvent:
  forward_declare: true
  name_cpp: "tree2::CohortScheduleEvent"
  constructor:
    args: [introduction: double, species_index: "util::index"]
  active:
    species_index: {type: "util::index", access: field, name_cpp: species_index}
    times: {type: "std::vector<double>", access: field, readonly: true}
    time_introduction: {type: double, access: member}
    time_end: {type: double, access: member}
    species_index_raw: {type: "size_t", access: member, name_cpp: species_index_raw}

CohortSchedule:
  forward_declare: true
  name_cpp: "tree2::CohortSchedule"
  constructor:
    roxygen: |
      Schedule of cohort introduction times
      @param n_species number of species
      @export
    args: [n_species: size_t]
  active:
    size: {type: size_t, access: member}
    n_species: {type: size_t, access: member, name_cpp: get_n_species}
    next_event: {type: "tree2::CohortScheduleEvent", access: member}
    remaining: {type: size_t, access: member}
    max_time: {type: double, access: member, name_cpp: r_max_time, name_cpp_set: r_set_max_time}
    ode_times: {type: "std::vector<double>", access: member, name_cpp: r_ode_times, name_cpp_set: r_set_ode_times}
    use_ode_times: {type: bool, access: member, name_cpp: r_use_ode_times, name_cpp_set: r_set_use_ode_times}
    all_times: {type: SEXP, access: member, name_cpp: r_all_times, name_cpp_set: r_set_all_times}
  methods:
    expand:
      return_type: "tree2::CohortSchedule"
      args: [n_extra: size_t, times: "std::vector<double>"]
    clear_times:
      return_type: void
      args: [species_index: "util::index"]
    clear_ode_times:
      return_type: void
      name_cpp: r_clear_ode_times
    set_times:
      return_type: void
      name_cpp: r_set_times
      args: [times: "std::vector<double>", species_index: "util::index"]
    times:
      return_type: "std::vector<double>"
      name_cpp: r_times
      args: [species_index: "util::index"]
    reset:
      return_type: void
    pop:
      return_type: void
    copy:
      return_type: "tree2::CohortSchedule"
      name_cpp: r_copy

Disturbance:
  name_cpp: "tree2::Disturbance"
  forward_declare: true
  constructor:
    roxygen: |
      Disturbance control object
      @param mean_interval Mean disturbance interval in years
      @export
    args: [mean_interval: double]
  methods:
    density:
      args: [time: double]
      return_type: double
    pr_survival:
      args: [time: double]
      return_type: double
    pr_survival_conditional:
      args: [time: double, time_start: double]
      return_type: double
    cdf:
      args: [time: double]
      return_type: double
  active:
    mean_interval: {type: double, access: member, name_cpp: r_mean_interval}

Control:
  forward_declare: struct
  name_cpp: "tree2::Control"
  roxygen: |
    Control parameters that tune various aspects of the numerical solvers.
    @title Control parameters
    @param ...,values Values to initialise the struct with (either as
    variadic arguments, or as a list, but not both).
    @export
  list:
    - plant_assimilation_adaptive: bool
    - plant_assimilation_over_distribution: bool
    - plant_assimilation_tol: double
    - plant_assimilation_iterations: size_t
    - plant_assimilation_rule: size_t
    - plant_assimilation_reuse_intervals: bool
    - plant_assimilation_approximate_use: bool
    - plant_assimilation_approximate_tol: double
    - plant_assimilation_approximate_nbase: int
    - plant_assimilation_approximate_max_depth: int
    - plant_assimilation_approximate_akima: bool
    - plant_assimilation_approximate_linear: bool
    - plant_assimilation_approximate_rescale_usually: bool
    - plant_seed_tol: double
    - plant_seed_iterations: int
    - cohort_gradient_eps: double
    - cohort_gradient_direction: int
    - cohort_gradient_richardson: bool
    - cohort_gradient_richardson_depth: size_t
    - environment_light_tol: double
    - environment_light_nbase: int
    - environment_light_max_depth: int
    - environment_light_akima: bool
    - environment_light_linear: bool
    - environment_light_rescale_usually: bool
    - environment_light_skip: bool
    - ode_step_size_min: double
    - ode_step_size_max: double
    - ode_tol_rel: double
    - ode_tol_abs: double
    - ode_a_y: double
    - ode_a_dydt: double
    - schedule_nsteps: int
    - schedule_eps: double
    - schedule_progress: bool
    - schedule_verbose: bool
    - schedule_default_patch_survival: double
    - schedule_default_multipler: double
    - schedule_default_min_step_size: double
    - schedule_default_max_step_size: double
    - equilibrium_nsteps: int
    - equilibrium_eps: double
    - equilibrium_large_seed_rain_change: double
    - equilibrium_progress: bool
    - equilibrium_verbose: bool
    - equilibrium_solver: int
    - equilibrium_extinct_seed_rain: double
    - equilibrium_runsteady_tol: double
    - equilibrium_inviable_test_eps: double
    - equilibrium_nattempts: int
    - equilibrium_solver_logN: bool
    - equilibrium_solver_try_keep: bool

Strategy:
  forward_declare: struct
  name_cpp: "tree2::Strategy"
  roxygen: |
    Strategy parameters that tune various aspects of the biological model.
    @title Strategy parameters
    @param ...,values Values to initialise the struct with (either as
    variadic arguments, or as a list, but not both).
    @export
  list:
    - lma: double
    - rho: double
    - hmat: double
    - s: double
    - n_area: double
    - lma_0: double
    - rho_0: double
    - hmat_0: double
    - s_0: double
    - n_area_0: double
    - eta: double
      #    - eta_c: double
    - theta: double
    - a1: double
    - B1: double
    - a3: double
    - k_l0: double
    - B4: double
    - k_s0: double
    - B5: double
    - b: double
    - c_Rs: double
    - c_Rb: double
    - c_Rr: double
    - c_Rl: double
    - Y: double
    - c_bio: double
      #    - k_l: double
    - k_b: double
      #    - k_s: double
    - k_r: double
    - c_p1: double
    - c_p2: double
    - c_acc: double
    - B7: double
    - c_r1: double
    - c_r2: double
    - c_s0: double
    - c_d0: double
    - c_d1: double
    - B6: double
    - c_d2: double
    - c_d3: double
    #    - height_0: double
    - control: "tree2::Control"

Parameters:
  forward_declare: struct
  name_cpp: "tree2::Parameters"
  roxygen: |
    Strategy parameters that tune various aspects of the biological model.
    @title Strategy parameters
    @param ...,values Values to initialise the struct with (either as
    variadic arguments, or as a list, but not both).
    @export
  list:
    - c_ext: double
    - patch_area: double
    - Pi_0: double
    - n_patches: size_t
    - strategies: "std::vector<tree2::Strategy>"
    - seed_rain: "std::vector<double>"
    - is_resident: "std::vector<bool>"
    - disturbance: "tree2::Disturbance"
    - control: "tree2::Control"
    - strategy_default: "tree2::Strategy"

QK:
  forward_declare: true
  name_cpp: "quadrature::QK"
  constructor:
    roxygen: |
      Gauss-Kronrod Quadrature
      @param rule Degree of the rule; valid sizes are 15, 21, 31, 41, 51, 61.
    args: [rule: size_t]
  methods:
    integrate:
      name_cpp: r_integrate
      args: [f: SEXP, a: double, b: double]
      return_type: double
    integrate_vector_x:
      args: [a: double, b: double]
      return_type: "std::vector<double>"
    integrate_vector:
      args: [y: "std::vector<double>", a: double, b: double]
      return_type: double
  active:
    last_area: {type: double, access: member, name_cpp: get_last_area}
    last_error: {type: double, access: member, name_cpp: get_last_error}
    last_area_abs: {type: double, access: member, name_cpp: get_last_area_abs}
    last_area_asc: {type: double, access: member, name_cpp: get_last_area_asc}

QAG:
  forward_declare: true
  name_cpp: "quadrature::QAG"
  constructor:
    args: [rule: size_t, max_iterations: size_t, atol: double, rtol: double]
  methods:
    integrate:
      return_type: double
      name_cpp: r_integrate
      args: [f: SEXP, a: double, b: double]
    integrate_with_intervals:
      return_type: double
      name_cpp: r_integrate_with_intervals
      args: [f: SEXP, intervals: SEXP]
  active:
    last_area: {type: double, access: member, name_cpp: get_last_area}
    last_error: {type: double, access: member, name_cpp: get_last_error}
    last_iterations: {type: size_t, access: member, name_cpp: get_last_iterations}
    last_intervals: {type: "quadrature::intervals_type", access: member, name_cpp: get_last_intervals}
    is_adaptive: {type: bool, access: member}

Interpolator:
  forward_declare: true
  name_cpp: "interpolator::Interpolator"
  constructor:
    roxygen: |
      Spline interpolation
      @export
  methods:
    init:
      return_type: void
      args: [x: "const std::vector<double>&", y: "const std::vector<double>&"]
    eval:
      return_type: "std::vector<double>"
      args: [x: "std::vector<double>"]
      name_cpp: r_eval
    deriv:
      return_type: "std::vector<double>"
      args: [x: "std::vector<double>"]
      name_cpp: r_deriv
  active:
    type: {type: "std::string", access: member}
    x: {type: "std::vector<double>", access: member, name_cpp: get_x}
    y: {type: "std::vector<double>", access: member, name_cpp: get_y}
    xy: {type: SEXP, access: member, name_cpp: r_get_xy}
    size: {type: size_t, access: member}
    min: {type: double, access: member}
    max: {type: double, access: member}

Environment:
  forward_declare: true
  name_cpp: "tree2::Environment"
  constructor:
    args: [p: "tree2::Parameters"]
    roxygen: |
      Environment object
      @param p A Parameters object
      @export
  methods:
    canopy_openness:
      args: [height: double]
      return_type: double
    patch_survival_conditional:
      args: [time_at_birth: double]
      return_type: double
    clear:
      return_type: void
    set_seed_rain_index:
      args: [x: "util::index"]
      return_type: void
      name_cpp: r_set_seed_rain_index
  active:
    patch_survival: {type: double, access: member}
    seed_rain_rate: {type: double, access: member}
    disturbance_regime: {type: "tree2::Disturbance", access: field}
    time: {type: double, access: field}
    light_environment: {type: "interpolator::Interpolator", access: field}

Plant:
  forward_declare: true
  name_cpp: "tree2::Plant"
  constructor:
    name_cpp: "tree2::make_plant"
    args: [strategy: "tree2::Strategy"]
  active:
    height: {type: double, access: member, name_cpp: height, name_cpp_set: set_height}
    # Possibly these four should be read-only?
    #
    # TODO: should be able to drop the name_cpp bit here, but there's
    # a bug in RcppR6 that leaves it required.
    mortality: {type: double, access: member, name_cpp: mortality, name_cpp_set: set_mortality}
    fecundity: {type: double, access: member, name_cpp: fecundity, name_cpp_set: set_fecundity}
    heartwood_area: {type: double, access: member, name_cpp: heartwood_area, name_cpp_set: set_heartwood_area}
    heartwood_mass: {type: double, access: member, name_cpp: heartwood_mass, name_cpp_set: set_heartwood_mass}
    leaf_area: {type: double, access: member}
    survival_probability: {type: double, access: member}
    strategy: {type: "tree2::Strategy", access: member, name_cpp: r_get_strategy}
    vars_size: {type: SEXP, access: member, name_cpp: r_get_vars_size}
    vars_phys: {type: SEXP, access: member, name_cpp: r_get_vars_phys}
    vars_growth: {type: SEXP, access: member, name_cpp: r_get_vars_growth}
  methods:
    leaf_area_above:
      args: [h: double]
      return_type: double
    compute_vars_phys:
      args: [environment: "const tree2::Environment&"]
      return_type: void
    germination_probability:
      args: [environment: "const tree2::Environment&"]
      return_type: double
    copy:
      return_type: "tree2::Plant"
      name_cpp: r_copy

# For now, this one is not templated.
Cohort:
  forward_declare: false
  name_cpp: "tree2::Cohort<tree2::Plant>"
  constructor:
    name_cpp: "tree2::make_cohort<tree2::Plant>"
    args: [strategy: "tree2::Strategy"]
  active:
    plant: {type: "tree2::Plant", access: field, readonly: true}
