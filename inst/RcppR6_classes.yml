Lorenz:
  name_cpp: "ode::test::Lorenz"
  forward_declare: true
  constructor:
    args: [sigma: double, R: double, b: double]
  active:
    size: {type: size_t, access: member}
    ode_values: 
      type: "std::vector<double>"
      access: member
      name_cpp: ode_values
      name_cpp_set: set_ode_values
    ode_rates: 
      type: "std::vector<double>"
      access: member
      name_cpp: r_ode_rates
    pars: 
      type: "Rcpp::NumericVector"
      access: member
      name_cpp: r_get_pars

OdeSystem:
  name_cpp: "ode::OdeSystem<T>"
  templates:
    parameters: T
    concrete:
      - ["Lorenz": "ode::test::Lorenz"]
  constructor:
    args: [obj: T, abs_tol: double=1e-8, rel_tol: double=1e-8]
  methods:
    do_step:
      args: [dt: double]
      return_type: void
    try_step:
      args: [dt: double]
      return_type: bool
    advance:
      args: [t: double, dt: double]
      return_type: void
    advance_save:
      args: [t: double, dt: double]
      return_type: "ode::state_saver<std::vector<double> >"
  active:
    obj: {type: T, access: member, name_cpp: get_obj}
    t: {type: double, access: field}
    y: {type: "std::vector<double>", access: field}

CohortScheduleEvent:
  name_cpp: "tree2::CohortSchedule::Event"
  constructor:
    args: [introduction: double, species_index: size_t]
  active:
    species_index: {type: size_t, access: member, name_cpp: r_species_index}
    times: {type: "std::vector<double>", access: field, readonly: true}
    time_introduction: {type: double, access: member}
    time_end: {type: double, access: member}
